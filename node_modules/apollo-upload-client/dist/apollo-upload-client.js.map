{"version":3,"file":"apollo-upload-client.js","sources":["../src/helpers.js","../src/network-interface.js","../src/batched-network-interface.js"],"sourcesContent":["/**\n * Extracts files and their positions within variables from an Apollo Client\n * request.\n * @see {@link http://dev.apollodata.com/core/apollo-client-api.html#Request}\n * @param {Object} request - Apollo GraphQL request to be sent to the server.\n * @param {Object} request.variables - GraphQL variables map.\n * @param {String} request.operationName - Name of the GraphQL query or mutation.\n * @returns {Object} - Request with files extracted to a list with their original object paths.\n */\nexport function extractRequestFiles(request) {\n  const files = []\n\n  // Recursively extracts files from an object tree\n  function recurse(node, path = '') {\n    // Iterate enumerable properties\n    Object.keys(node).forEach(key => {\n      // Skip non-object\n      if (typeof node[key] !== 'object' || node[key] === null) return\n\n      // Check if the node is a file\n      if (\n        (typeof File !== 'undefined' && node[key] instanceof File) ||\n        node[key] instanceof ReactNativeFile\n      ) {\n        // Extract the file and it's original path in the GraphQL input\n        // variables for later transport as a multipart form field.\n        files.push({\n          variablesPath: `variables${path}.${key}`,\n          file: node[key]\n        })\n\n        // Delete the file from the request variables. It gets repopulated on\n        // the server by apollo-upload-server middleware. If an array item it\n        // must be deleted without reindexing the array.\n        delete node[key]\n\n        // No deeper recursion\n        return\n      }\n\n      // Convert file list to an array so recursion can reach the files\n      if (typeof FileList !== 'undefined' && node[key] instanceof FileList)\n        node[key] = Array.from(node[key])\n\n      // Recurse into child node\n      recurse(node[key], `${path}.${key}`)\n    })\n  }\n\n  // Recurse request variables\n  if (request.variables) recurse(request.variables)\n\n  return { operation: request, files }\n}\n\n/**\n * A React Native file.\n */\nexport class ReactNativeFile {\n  /**\n   * A React Native FormData file object.\n   * @see {@link https://github.com/facebook/react-native/blob/v0.45.1/Libraries/Network/FormData.js#L34}\n   * @typedef {Object} ReactNativeFileObject\n   * @property {String} uri - File system path.\n   * @property {String} [type] - File content type.\n   * @property {String} [name] - File name.\n   */\n\n  /**\n   * Constructs a new file.\n   * @param {ReactNativeFileObject} file\n   * @example\n   * const file = new ReactNativeFile({\n   *  uri: uriFromCameraRoll,\n   *  type: 'image/jpeg',\n   *  name: 'photo.jpg'\n   * })\n   */\n  constructor({ uri, type, name }) {\n    this.uri = uri\n    this.type = type\n    this.name = name\n  }\n\n  /**\n   * Creates an array of file instances.\n   * @param {ReactNativeFileObject[]} files\n   * @example\n   * const files = ReactNativeFile.list({\n   *   uri: uriFromCameraRoll1,\n   *   type: 'image/jpeg',\n   *   name: 'photo-1.jpg'\n   * }, {\n   *   uri: uriFromCameraRoll2,\n   *   type: 'image/jpeg',\n   *   name: 'photo-2.jpg'\n   * })\n   */\n  static list = files => files.map(file => new ReactNativeFile(file))\n}\n","import { HTTPFetchNetworkInterface, printAST } from 'apollo-client'\nimport { extractRequestFiles } from './helpers'\n\nexport class UploadHTTPFetchNetworkInterface extends HTTPFetchNetworkInterface {\n  fetchFromRemoteEndpoint({ request, options }) {\n    // Skip process if uploads are impossible\n    if (typeof FormData !== 'undefined') {\n      // Extract any files from the request\n      const { operation, files } = extractRequestFiles(request)\n\n      // Only initiate a multipart form request if there are uploads\n      if (files.length) {\n        // Convert query AST to string for transport\n        operation.query = printAST(operation.query)\n\n        // Build the form\n        const formData = new FormData()\n        formData.append('operations', JSON.stringify(operation))\n        files.forEach(({ variablesPath, file }) =>\n          formData.append(variablesPath, file)\n        )\n\n        // Send request\n        return fetch(this._uri, {\n          method: 'POST',\n          body: formData,\n          ...options\n        })\n      }\n    }\n\n    // Standard fetch method fallback\n    return super.fetchFromRemoteEndpoint({ request, options })\n  }\n}\n\nexport function createNetworkInterface({ uri, opts = {} }) {\n  return new UploadHTTPFetchNetworkInterface(uri, opts)\n}\n","import { HTTPBatchedNetworkInterface, printAST } from 'apollo-client'\nimport { extractRequestFiles } from './helpers'\n\nexport class UploadHTTPBatchedNetworkInterface extends HTTPBatchedNetworkInterface {\n  batchedFetchFromRemoteEndpoint({ requests, options }) {\n    // Skip process if uploads are impossible\n    if (typeof FormData !== 'undefined') {\n      // Extract any files from the request\n      const batchFiles = []\n      const batchOperations = requests.map((request, operationIndex) => {\n        const { operation, files } = extractRequestFiles(request)\n        if (files.length) {\n          batchFiles.push({\n            operationIndex,\n            files\n          })\n        }\n        return operation\n      })\n\n      // Only initiate a multipart form request if there are uploads\n      if (batchFiles.length) {\n        // For each operation, convert query AST to string for transport\n        batchOperations.forEach(operation => {\n          operation.query = printAST(operation.query)\n        })\n\n        // Build the form\n        const formData = new FormData()\n        formData.append('operations', JSON.stringify(batchOperations))\n        batchFiles.forEach(({ operationIndex, files }) => {\n          files.forEach(({ variablesPath, file }) =>\n            formData.append(`${operationIndex}.${variablesPath}`, file)\n          )\n        })\n\n        // Send request\n        return fetch(this._uri, {\n          method: 'POST',\n          body: formData,\n          ...options\n        })\n      }\n    }\n\n    // Standard fetch method fallback\n    return super.batchedFetchFromRemoteEndpoint({ requests, options })\n  }\n}\n\nexport const createBatchingNetworkInterface = ({\n  opts: fetchOpts = {},\n  ...options\n}) => new UploadHTTPBatchedNetworkInterface({ fetchOpts, ...options })\n"],"names":["extractRequestFiles","request","files","recurse","node","path","forEach","key","File","ReactNativeFile","push","FileList","variables","operation","uri","type","name","list","map","file","UploadHTTPFetchNetworkInterface","fetchFromRemoteEndpoint","options","FormData","length","query","printAST","formData","append","variablesPath","fetch","_uri","HTTPFetchNetworkInterface","createNetworkInterface","opts","UploadHTTPBatchedNetworkInterface","batchedFetchFromRemoteEndpoint","requests","batchFiles","batchOperations","operationIndex","HTTPBatchedNetworkInterface","createBatchingNetworkInterface","fetchOpts"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AASA,AAAO,SAASA,mBAAT,CAA6BC,OAA7B,EAAsC;MACrCC,QAAQ,EAAd;;;WAGSC,OAAT,CAAiBC,IAAjB,EAAkC;QAAXC,IAAW,uEAAJ,EAAI;;;iBAEpBD,IAAZ,EAAkBE,OAAlB,CAA0B,eAAO;;UAE3B,QAAOF,KAAKG,GAAL,CAAP,MAAqB,QAArB,IAAiCH,KAAKG,GAAL,MAAc,IAAnD,EAAyD;;;UAItD,OAAOC,IAAP,KAAgB,WAAhB,IAA+BJ,KAAKG,GAAL,aAAqBC,IAArD,IACAJ,KAAKG,GAAL,aAAqBE,eAFvB,EAGE;;;cAGMC,IAAN,CAAW;uCACkBL,IAA3B,SAAmCE,GAD1B;gBAEHH,KAAKG,GAAL;SAFR;;;;;eAQOH,KAAKG,GAAL,CAAP;;;;;;;UAOE,OAAOI,QAAP,KAAoB,WAApB,IAAmCP,KAAKG,GAAL,aAAqBI,QAA5D,EACEP,KAAKG,GAAL,IAAY,YAAWH,KAAKG,GAAL,CAAX,CAAZ;;;cAGMH,KAAKG,GAAL,CAAR,EAAsBF,IAAtB,SAA8BE,GAA9B;KA9BF;;;;MAmCEN,QAAQW,SAAZ,EAAuBT,QAAQF,QAAQW,SAAhB;;SAEhB,EAAEC,WAAWZ,OAAb,EAAsBC,YAAtB,EAAP;;;;;;AAMF,IAAaO,eAAb;;;;;;;;;;;;;;;;;;;;AAoBE,+BAAiC;MAAnBK,GAAmB,QAAnBA,GAAmB;MAAdC,IAAc,QAAdA,IAAc;MAARC,IAAQ,QAARA,IAAQ;;;;OAC1BF,GAAL,GAAWA,GAAX;OACKC,IAAL,GAAYA,IAAZ;OACKC,IAAL,GAAYA,IAAZ;;;AAvBSP,gBAwCJQ,OAAO;SAASf,MAAMgB,GAAN,CAAU;WAAQ,IAAIT,eAAJ,CAAoBU,IAApB,CAAR;GAAV,CAAT;;;IC/FHC,+BAAb;;;;;;;;;4CACEC,uBADF,0CACgD;QAApBpB,OAAoB,QAApBA,OAAoB;QAAXqB,OAAW,QAAXA,OAAW;;;QAExC,OAAOC,QAAP,KAAoB,WAAxB,EAAqC;;iCAENvB,oBAAoBC,OAApB,CAFM;UAE3BY,SAF2B,wBAE3BA,SAF2B;UAEhBX,KAFgB,wBAEhBA,KAFgB;;;;;UAK/BA,MAAMsB,MAAV,EAAkB;;kBAENC,KAAV,GAAkBC,sBAASb,UAAUY,KAAnB,CAAlB;;;YAGME,WAAW,IAAIJ,QAAJ,EAAjB;iBACSK,MAAT,CAAgB,YAAhB,EAA8B,gBAAef,SAAf,CAA9B;cACMP,OAAN,CAAc;cAAGuB,aAAH,SAAGA,aAAH;cAAkBV,IAAlB,SAAkBA,IAAlB;iBACZQ,SAASC,MAAT,CAAgBC,aAAhB,EAA+BV,IAA/B,CADY;SAAd;;;eAKOW,MAAM,KAAKC,IAAX;kBACG,MADH;gBAECJ;WACHL,OAHE,EAAP;;;;;WASG,gCAAMD,uBAAN,YAA8B,EAAEpB,gBAAF,EAAWqB,gBAAX,EAA9B,CAAP;GA7BJ;;;EAAqDU,sCAArD;;AAiCA,AAAO,SAASC,sBAAT,QAAoD;MAAlBnB,GAAkB,SAAlBA,GAAkB;yBAAboB,IAAa;MAAbA,IAAa,8BAAN,EAAM;;SAClD,IAAId,+BAAJ,CAAoCN,GAApC,EAAyCoB,IAAzC,CAAP;;;IClCWC,iCAAb;;;;;;;;;8CACEC,8BADF,iDACwD;QAArBC,QAAqB,QAArBA,QAAqB;QAAXf,OAAW,QAAXA,OAAW;;;QAEhD,OAAOC,QAAP,KAAoB,WAAxB,EAAqC;;UAE7Be,aAAa,EAAnB;UACMC,kBAAkBF,SAASnB,GAAT,CAAa,UAACjB,OAAD,EAAUuC,cAAV,EAA6B;mCACnCxC,oBAAoBC,OAApB,CADmC;YACxDY,SADwD,wBACxDA,SADwD;YAC7CX,KAD6C,wBAC7CA,KAD6C;;YAE5DA,MAAMsB,MAAV,EAAkB;qBACLd,IAAX,CAAgB;0CAAA;;WAAhB;;eAKKG,SAAP;OARsB,CAAxB;;;UAYIyB,WAAWd,MAAf,EAAuB;;wBAELlB,OAAhB,CAAwB,qBAAa;oBACzBmB,KAAV,GAAkBC,sBAASb,UAAUY,KAAnB,CAAlB;SADF;;;YAKME,WAAW,IAAIJ,QAAJ,EAAjB;iBACSK,MAAT,CAAgB,YAAhB,EAA8B,gBAAeW,eAAf,CAA9B;mBACWjC,OAAX,CAAmB,iBAA+B;cAA5BkC,cAA4B,SAA5BA,cAA4B;cAAZtC,KAAY,SAAZA,KAAY;;gBAC1CI,OAAN,CAAc;gBAAGuB,aAAH,SAAGA,aAAH;gBAAkBV,IAAlB,SAAkBA,IAAlB;mBACZQ,SAASC,MAAT,CAAmBY,cAAnB,SAAqCX,aAArC,EAAsDV,IAAtD,CADY;WAAd;SADF;;;eAOOW,MAAM,KAAKC,IAAX;kBACG,MADH;gBAECJ;WACHL,OAHE,EAAP;;;;;WASG,gCAAMc,8BAAN,YAAqC,EAAEC,kBAAF,EAAYf,gBAAZ,EAArC,CAAP;GA3CJ;;;EAAuDmB,wCAAvD;;AA+CO,IAAMC,iCAAiC,SAAjCA,8BAAiC;yBAC5CR,IAD4C;MACtCS,SADsC,8BAC1B,EAD0B;MAEzCrB,OAFyC;;SAGxC,IAAIa,iCAAJ,YAAwCQ,oBAAxC,IAAsDrB,OAAtD,EAHwC;CAAvC;;;;;;;;;"}