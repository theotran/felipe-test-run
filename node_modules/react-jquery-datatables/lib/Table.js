'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDomServer = require('react-dom/server');

var _reactDomServer2 = _interopRequireDefault(_reactDomServer);

var $ = require('jquery');
var dt = require('datatables.net-bs');
var buttons = require('datatables.net-buttons-bs');

require('datatables.net-buttons/js/buttons.colVis.js'); // Column visibility
require('datatables.net-buttons/js/buttons.html5.js'); // HTML 5 file export
require('datatables.net-buttons/js/buttons.flash.js'); // Flash file export
require('datatables.net-buttons/js/buttons.print.js'); // Print view button

var simpleGet = function simpleGet(key) {
  return function (data) {
    return data[key];
  };
};
var keyGetter = function keyGetter(keys) {
  return function (data) {
    return keys.map(function (key) {
      return data[key];
    });
  };
};

var isEmpty = function isEmpty(value) {
  return value == null || value === '';
}; // eslint-disable-line eqeqeq

var getCellValue = function getCellValue(_ref, row) {
  var prop = _ref.prop;
  var defaultContent = _ref.defaultContent;
  var render = _ref.render;
  return(
    // Return `defaultContent` if the value is empty.
    !isEmpty(prop) && isEmpty(row[prop]) ? defaultContent : // eslint-disable-line no-nested-ternary
    // Use the render function for the value.
    render ? render(row[prop], row) :
    // Add Commas for Number formatting
    // addCommas ?
    // Otherwise just return the value.
    row[prop]
  );
};

var getCellClass = function getCellClass(_ref2, row) {
  var prop = _ref2.prop;
  var className = _ref2.className;
  return !isEmpty(prop) && isEmpty(row[prop]) ? 'empty-cell' : // eslint-disable-line no-nested-ternary
  typeof className == 'function' ? className(row[prop], row) : // eslint-disable-line eqeqeq
  className;
};

// This function accepts an integer, and produces a piece of HTML that shows it nicely with
// some empty space at "thousand" markers.
// Note, these space are not spaces, if you copy paste, they will not be visible.
var valPrettyPrint = function valPrettyPrint(orgVal) {
  // Save after-comma text, if present
  var period = orgVal.indexOf(".");
  var frac = period >= 0 ? orgVal.substr(period) : "";
  // Work on input as an integer
  var val = "" + Math.trunc(orgVal);
  var res = "";
  while (val.length > 0) {
    res = val.substr(Math.max(0, val.length - 3), 3) + res;
    val = val.substr(0, val.length - 3);
    if (val.length > 0) {
      res = "<span class='thousandsSeparator'></span>" + res;
    }
  }
  // Add the saved after-period information
  res += frac;
  return res;
};
// 2056776401.50 = 2,056,776,401.50
var addThousandsCommas = function addThousandsCommas(n) {
  n = n.toString();
  while (true) {
    var n2 = n.replace(/(\d)(\d{3})($|,|\.)/g, '$1,$2$3');
    if (n == n2) break;
    n = n2;
  }
  return n;
};

var Table = (function (_Component) {
  _inherits(Table, _Component);

  _createClass(Table, null, [{
    key: 'propTypes',
    value: {
      keys: _react.PropTypes.oneOfType([_react.PropTypes.arrayOf(_react.PropTypes.string), _react.PropTypes.string]).isRequired,

      columns: _react.PropTypes.arrayOf(_react.PropTypes.shape({
        title: _react.PropTypes.string.isRequired,
        prop: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),
        render: _react.PropTypes.func,
        sortable: _react.PropTypes.bool,
        defaultContent: _react.PropTypes.string,
        width: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),
        className: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.func])
      })).isRequired,

      dataArray: _react.PropTypes.arrayOf(_react.PropTypes.oneOfType([_react.PropTypes.array, _react.PropTypes.object])).isRequired,

      buildRowOptions: _react.PropTypes.func,

      sortBy: _react.PropTypes.shape({
        prop: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),
        order: _react.PropTypes.oneOf(['ascending', 'descending'])
      })
    },
    enumerable: true
  }, {
    key: 'defaultProps',
    value: {
      buildRowOptions: function buildRowOptions() {
        return {};
      },
      sortBy: {}
    },
    enumerable: true
  }]);

  function Table(props) {
    _classCallCheck(this, Table);

    _get(Object.getPrototypeOf(Table.prototype), 'constructor', this).call(this, props);
    // console.log('Table constructor', this);
    this._headers = [];
    //  bind event handlers in the constructor so they are only bound once for every instance
  }

  _createClass(Table, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      // console.log('Table componentDidMount', this);
      var _props = this.props;
      var columns = _props.columns;
      var sortBy = _props.sortBy;

      var table = this.getDTMarkup();
      var dtContainer = this.refs.dtContainer;
      var renderedTable = _reactDomServer2['default'].renderToStaticMarkup(table, dtContainer);

      $('#dtContainer').append(renderedTable);

      var jqueryTable = $('#dt');

      // console.log('dtContainer', document.getElementById('dtContainer'));
      jqueryTable.DataTable({ // eslint-disable-line new-cap
        dom: '<"html5buttons"B>lTfgitp',
        buttons: ['copy', 'csv', 'excel', 'pdf', 'print'],
        "order": [[columns.findIndex(function (col) {
          return col.prop === sortBy.prop;
        }), sortBy.order]],
        "pagingType": 'numbers',
        "bAutoWidth": false,
        "bDestroy": true,
        "fnDrawCallback": function fnDrawCallback() {
          console.log('datatables fnDrawCallback');
        },

        "initComplete": function initComplete(settings, json) {
          this.api().columns('.sum.integer').every(function () {
            var column = this;

            var sum = column.data().reduce(function (a, b) {
              var _a = a.toString().split(',').join('');
              var _b = b.toString().split(',').join('');
              return parseInt(_a, 10) + parseInt(_b, 10);
            });

            $(column.footer()).html('' + sum.toLocaleString('en'));
          });
          this.api().columns('.sum.dollar').every(function () {
            var column = this;

            var sum = column.data().reduce(function (a, b) {
              var _a = a.toString().split(',').join('');
              var _b = b.toString().split(',').join('');
              return parseInt(_a, 10) + parseInt(_b, 10);
            });

            $(column.footer()).html('$' + sum.toLocaleString('en'));
          });
          this.api().cells('.thousandsCommas').every(function () {
            var cell = this;
            var node = cell.node();
            var num = cell.data();
            $(node).html(addThousandsCommas(num));
          });
          this.api().cells('.valPrettyPrint').every(function () {
            var cell = this;
            var node = cell.node();
            var num = cell.data();
            $(node).html(valPrettyPrint(num));
          });
        }
      });
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      console.log('Table shouldComponentUpdate', this);
      console.log('nextProps', nextProps);
      console.log('nextState', nextState);
      // TODO check if dataArray changes, if so implement componentDidMount code in componentWillUpdate
      return false;
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      console.log('Table componentWillUnmount', this);
    }
  }, {
    key: 'getDTMarkup',
    value: function getDTMarkup() {
      var _this = this;

      // console.log('Table getDTMarkup', this);

      var _props2 = this.props;
      var columns = _props2.columns;
      var keys = _props2.keys;
      var buildRowOptions = _props2.buildRowOptions;
      var sortBy = _props2.sortBy;
      var dataArray = _props2.dataArray;

      console.log('before', dataArray);
      // handled by datatables.net order option
      //-XXX-Initial sorting if specified.-XXX-
      // if (sortBy) {
      //   dataArray = sort(sortBy, dataArray);
      //   console.log('after', dataArray);
      // }
      var headers = columns.map(function (col, idx) {
        return _react2['default'].createElement(
          'th',
          {
            ref: function (c) {
              return _this._headers[idx] = c;
            },
            key: idx,
            style: { width: col.width },
            className: col.className,
            role: 'columnheader',
            scope: 'col' },
          _react2['default'].createElement(
            'span',
            null,
            col.title
          )
        );
      });
      var footers = columns.map(function () {
        return _react2['default'].createElement('th', null);
      });

      var getKeys = Array.isArray(keys) ? keyGetter(keys) : simpleGet(keys);
      var rows = dataArray.map(function (row) {
        return _react2['default'].createElement(
          'tr',
          _extends({ key: getKeys(row) }, buildRowOptions(row)),
          columns.map(function (col, i) {
            return _react2['default'].createElement(
              'td',
              { key: i, className: getCellClass(col, row) },
              getCellValue(col, row)
            );
          })
        );
      });

      return _react2['default'].createElement(
        'table',
        _extends({ id: 'dt' }, this.props),
        _react2['default'].createElement(
          'thead',
          null,
          _react2['default'].createElement(
            'tr',
            null,
            headers
          )
        ),
        _react2['default'].createElement(
          'tfoot',
          null,
          _react2['default'].createElement(
            'tr',
            null,
            footers
          )
        ),
        _react2['default'].createElement(
          'tbody',
          null,
          rows.length ? rows : _react2['default'].createElement(
            'tr',
            null,
            _react2['default'].createElement(
              'td',
              { colSpan: columns.length, className: 'text-center' },
              'No data'
            )
          )
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      // console.log('Table render', this);
      return _react2['default'].createElement(
        'div',
        null,
        _react2['default'].createElement('div', { ref: 'dtContainer', id: 'dtContainer' })
      );
    }
  }], [{
    key: 'propTypes',
    value: {
      keys: _react.PropTypes.oneOfType([_react.PropTypes.arrayOf(_react.PropTypes.string), _react.PropTypes.string]).isRequired,

      columns: _react.PropTypes.arrayOf(_react.PropTypes.shape({
        title: _react.PropTypes.string.isRequired,
        prop: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),
        render: _react.PropTypes.func,
        sortable: _react.PropTypes.bool,
        defaultContent: _react.PropTypes.string,
        width: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),
        className: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.func])
      })).isRequired,

      dataArray: _react.PropTypes.arrayOf(_react.PropTypes.oneOfType([_react.PropTypes.array, _react.PropTypes.object])).isRequired,

      buildRowOptions: _react.PropTypes.func,

      sortBy: _react.PropTypes.shape({
        prop: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),
        order: _react.PropTypes.oneOf(['ascending', 'descending'])
      })
    },
    enumerable: true
  }]);

  return Table;
})(_react.Component);

exports['default'] = Table;
module.exports = exports['default'];