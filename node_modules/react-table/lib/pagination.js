'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//
// import _ from './utils'

var defaultButton = function defaultButton(props) {
  return _react2.default.createElement(
    'button',
    _extends({ type: 'button' }, props, { className: '-btn' }),
    props.children
  );
};

exports.default = _react2.default.createClass({
  displayName: 'pagination',
  getInitialState: function getInitialState() {
    return {
      page: this.props.page
    };
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    this.setState({ page: nextProps.page });
  },
  getSafePage: function getSafePage(page) {
    return Math.min(Math.max(page, 0), this.props.pages - 1);
  },
  changePage: function changePage(page) {
    page = this.getSafePage(page);
    this.setState({ page: page });
    this.props.onPageChange(page);
  },
  applyPage: function applyPage(e) {
    e && e.preventDefault();
    var page = this.state.page;
    this.changePage(page === '' ? this.props.page : page);
  },
  render: function render() {
    var _this = this;

    var _props = this.props,
        pages = _props.pages,
        page = _props.page,
        showPageSizeOptions = _props.showPageSizeOptions,
        pageSizeOptions = _props.pageSizeOptions,
        pageSize = _props.pageSize,
        showPageJump = _props.showPageJump,
        canPrevious = _props.canPrevious,
        canNext = _props.canNext,
        onPageSizeChange = _props.onPageSizeChange,
        className = _props.className,
        _props$PreviousCompon = _props.PreviousComponent,
        PreviousComponent = _props$PreviousCompon === undefined ? defaultButton : _props$PreviousCompon,
        _props$NextComponent = _props.NextComponent,
        NextComponent = _props$NextComponent === undefined ? defaultButton : _props$NextComponent;


    return _react2.default.createElement(
      'div',
      {
        className: (0, _classnames2.default)(className, '-pagination'),
        style: this.props.paginationStyle
      },
      _react2.default.createElement(
        'div',
        { className: '-previous' },
        _react2.default.createElement(
          PreviousComponent,
          {
            onClick: function onClick(e) {
              if (!canPrevious) return;
              _this.changePage(page - 1);
            },
            disabled: !canPrevious
          },
          this.props.previousText
        )
      ),
      _react2.default.createElement(
        'div',
        { className: '-center' },
        _react2.default.createElement(
          'span',
          { className: '-pageInfo' },
          this.props.pageText,
          ' ',
          showPageJump ? _react2.default.createElement(
            'div',
            { className: '-pageJump' },
            _react2.default.createElement('input', {
              type: this.state.page === '' ? 'text' : 'number',
              onChange: function onChange(e) {
                var val = e.target.value;
                var page = val - 1;
                if (val === '') {
                  return _this.setState({ page: val });
                }
                _this.setState({ page: _this.getSafePage(page) });
              },
              value: this.state.page === '' ? '' : this.state.page + 1,
              onBlur: this.applyPage,
              onKeyPress: function onKeyPress(e) {
                if (e.which === 13 || e.keyCode === 13) {
                  _this.applyPage();
                }
              }
            })
          ) : _react2.default.createElement(
            'span',
            { className: '-currentPage' },
            page + 1
          ),
          ' ',
          this.props.ofText,
          ' ',
          _react2.default.createElement(
            'span',
            { className: '-totalPages' },
            pages
          )
        ),
        showPageSizeOptions && _react2.default.createElement(
          'span',
          { className: 'select-wrap -pageSizeOptions' },
          _react2.default.createElement(
            'select',
            {
              onChange: function onChange(e) {
                return onPageSizeChange(Number(e.target.value));
              },
              value: pageSize
            },
            pageSizeOptions.map(function (option, i) {
              return _react2.default.createElement(
                'option',
                {
                  key: i,
                  value: option },
                option,
                ' ',
                _this.props.rowsText
              );
            })
          )
        )
      ),
      _react2.default.createElement(
        'div',
        { className: '-next' },
        _react2.default.createElement(
          NextComponent,
          {
            onClick: function onClick(e) {
              if (!canNext) return;
              _this.changePage(page + 1);
            },
            disabled: !canNext
          },
          this.props.nextText
        )
      )
    );
  }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYWdpbmF0aW9uLmpzIl0sIm5hbWVzIjpbImRlZmF1bHRCdXR0b24iLCJwcm9wcyIsImNoaWxkcmVuIiwiY3JlYXRlQ2xhc3MiLCJnZXRJbml0aWFsU3RhdGUiLCJwYWdlIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsInNldFN0YXRlIiwiZ2V0U2FmZVBhZ2UiLCJNYXRoIiwibWluIiwibWF4IiwicGFnZXMiLCJjaGFuZ2VQYWdlIiwib25QYWdlQ2hhbmdlIiwiYXBwbHlQYWdlIiwiZSIsInByZXZlbnREZWZhdWx0Iiwic3RhdGUiLCJyZW5kZXIiLCJzaG93UGFnZVNpemVPcHRpb25zIiwicGFnZVNpemVPcHRpb25zIiwicGFnZVNpemUiLCJzaG93UGFnZUp1bXAiLCJjYW5QcmV2aW91cyIsImNhbk5leHQiLCJvblBhZ2VTaXplQ2hhbmdlIiwiY2xhc3NOYW1lIiwiUHJldmlvdXNDb21wb25lbnQiLCJOZXh0Q29tcG9uZW50IiwicGFnaW5hdGlvblN0eWxlIiwicHJldmlvdXNUZXh0IiwicGFnZVRleHQiLCJ2YWwiLCJ0YXJnZXQiLCJ2YWx1ZSIsIndoaWNoIiwia2V5Q29kZSIsIm9mVGV4dCIsIk51bWJlciIsIm1hcCIsIm9wdGlvbiIsImkiLCJyb3dzVGV4dCIsIm5leHRUZXh0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7OztBQUNBO0FBQ0E7O0FBRUEsSUFBTUEsZ0JBQWdCLFNBQWhCQSxhQUFnQixDQUFDQyxLQUFEO0FBQUEsU0FDcEI7QUFBQTtBQUFBLGVBQVEsTUFBSyxRQUFiLElBQTBCQSxLQUExQixJQUFpQyxXQUFVLE1BQTNDO0FBQW1EQSxVQUFNQztBQUF6RCxHQURvQjtBQUFBLENBQXRCOztrQkFJZSxnQkFBTUMsV0FBTixDQUFrQjtBQUFBO0FBQy9CQyxpQkFEK0IsNkJBQ1o7QUFDakIsV0FBTztBQUNMQyxZQUFNLEtBQUtKLEtBQUwsQ0FBV0k7QUFEWixLQUFQO0FBR0Qs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S1osVUFBTCxDQUFnQlQsT0FBTyxDQUF2QjtBQUNELGFBSkg7QUFLRSxzQkFBVSxDQUFDcUI7QUFMYjtBQU9HLGVBQUt6QixLQUFMLENBQVc0QztBQVBkO0FBREY7QUE3REYsS0FERjtBQTJFRDtBQW5IOEIsQ0FBbEIsQyIsImZpbGUiOiJwYWdpbmF0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcydcbi8vXG4vLyBpbXBvcnQgXyBmcm9tICcuL3V0aWxzJ1xuXG5jb25zdCBkZWZhdWx0QnV0dG9uID0gKHByb3BzKSA9PiAoXG4gIDxidXR0b24gdHlwZT0nYnV0dG9uJyB7Li4ucHJvcHN9IGNsYXNzTmFtZT0nLWJ0bic+e3Byb3BzLmNoaWxkcmVufTwvYnV0dG9uPlxuKVxuXG5leHBvcnQgZGVmYXVsdCBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGdldEluaXRpYWxTdGF0ZSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhZ2U6IHRoaXMucHJvcHMucGFnZVxuICAgIH1cbiAgfSxcbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAobmV4dFByb3BzKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7cGFnZTogbmV4dFByb3BzLnBhZ2V9KVxuICB9LFxuICBnZXRTYWZlUGFnZSAocGFnZSkge1xuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChwYWdlLCAwKSwgdGhpcy5wcm9wcy5wYWdlcyAtIDEpXG4gIH0sXG4gIGNoYW5nZVBhZ2UgKHBhZ2UpIHtcbiAgICBwYWdlID0gdGhpcy5nZXRTYWZlUGFnZShwYWdlKVxuICAgIHRoaXMuc2V0U3RhdGUoe3BhZ2V9KVxuICAgIHRoaXMucHJvcHMub25QYWdlQ2hhbmdlKHBhZ2UpXG4gIH0sXG4gIGFwcGx5UGFnZSAoZSkge1xuICAgIGUgJiYgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgcGFnZSA9IHRoaXMuc3RhdGUucGFnZVxuICAgIHRoaXMuY2hhbmdlUGFnZShwYWdlID09PSAnJyA/IHRoaXMucHJvcHMucGFnZSA6IHBhZ2UpXG4gIH0sXG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3Qge1xuICAgICAgLy8gQ29tcHV0ZWRcbiAgICAgIHBhZ2VzLFxuICAgICAgLy8gUHJvcHNcbiAgICAgIHBhZ2UsXG4gICAgICBzaG93UGFnZVNpemVPcHRpb25zLFxuICAgICAgcGFnZVNpemVPcHRpb25zLFxuICAgICAgcGFnZVNpemUsXG4gICAgICBzaG93UGFnZUp1bXAsXG4gICAgICBjYW5QcmV2aW91cyxcbiAgICAgIGNhbk5leHQsXG4gICAgICBvblBhZ2VTaXplQ2hhbmdlLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgUHJldmlvdXNDb21wb25lbnQgPSBkZWZhdWx0QnV0dG9uLFxuICAgICAgTmV4dENvbXBvbmVudCA9IGRlZmF1bHRCdXR0b25cbiAgICB9ID0gdGhpcy5wcm9wc1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc25hbWVzKGNsYXNzTmFtZSwgJy1wYWdpbmF0aW9uJyl9XG4gICAgICAgIHN0eWxlPXt0aGlzLnByb3BzLnBhZ2luYXRpb25TdHlsZX1cbiAgICAgID5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9Jy1wcmV2aW91cyc+XG4gICAgICAgICAgPFByZXZpb3VzQ29tcG9uZW50XG4gICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4ge1xuICAgICAgICAgICAgICBpZiAoIWNhblByZXZpb3VzKSByZXR1cm5cbiAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VQYWdlKHBhZ2UgLSAxKVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIGRpc2FibGVkPXshY2FuUHJldmlvdXN9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3RoaXMucHJvcHMucHJldmlvdXNUZXh0fVxuICAgICAgICAgIDwvUHJldmlvdXNDb21wb25lbnQ+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nLWNlbnRlcic+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSctcGFnZUluZm8nPlxuICAgICAgICAgICAge3RoaXMucHJvcHMucGFnZVRleHR9IHtzaG93UGFnZUp1bXAgPyAoXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSctcGFnZUp1bXAnPlxuICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgdHlwZT17dGhpcy5zdGF0ZS5wYWdlID09PSAnJyA/ICd0ZXh0JyA6ICdudW1iZXInfVxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWwgPSBlLnRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYWdlID0gdmFsIC0gMVxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldFN0YXRlKHtwYWdlOiB2YWx9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe3BhZ2U6IHRoaXMuZ2V0U2FmZVBhZ2UocGFnZSl9KVxuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnBhZ2UgPT09ICcnID8gJycgOiB0aGlzLnN0YXRlLnBhZ2UgKyAxfVxuICAgICAgICAgICAgICAgICAgb25CbHVyPXt0aGlzLmFwcGx5UGFnZX1cbiAgICAgICAgICAgICAgICAgIG9uS2V5UHJlc3M9e2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS53aGljaCA9PT0gMTMgfHwgZS5rZXlDb2RlID09PSAxMykge1xuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlQYWdlKClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nLWN1cnJlbnRQYWdlJz57cGFnZSArIDF9PC9zcGFuPlxuICAgICAgICAgICAgKX0ge3RoaXMucHJvcHMub2ZUZXh0fSA8c3BhbiBjbGFzc05hbWU9Jy10b3RhbFBhZ2VzJz57cGFnZXN9PC9zcGFuPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICB7c2hvd1BhZ2VTaXplT3B0aW9ucyAmJiAoXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J3NlbGVjdC13cmFwIC1wYWdlU2l6ZU9wdGlvbnMnPlxuICAgICAgICAgICAgICA8c2VsZWN0XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBvblBhZ2VTaXplQ2hhbmdlKE51bWJlcihlLnRhcmdldC52YWx1ZSkpfVxuICAgICAgICAgICAgICAgIHZhbHVlPXtwYWdlU2l6ZX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtwYWdlU2l6ZU9wdGlvbnMubWFwKChvcHRpb24sIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb25cbiAgICAgICAgICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e29wdGlvbn0+XG4gICAgICAgICAgICAgICAgICAgICAge29wdGlvbn0ge3RoaXMucHJvcHMucm93c1RleHR9XG4gICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9Jy1uZXh0Jz5cbiAgICAgICAgICA8TmV4dENvbXBvbmVudFxuICAgICAgICAgICAgb25DbGljaz17KGUpID0+IHtcbiAgICAgICAgICAgICAgaWYgKCFjYW5OZXh0KSByZXR1cm5cbiAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VQYWdlKHBhZ2UgKyAxKVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIGRpc2FibGVkPXshY2FuTmV4dH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7dGhpcy5wcm9wcy5uZXh0VGV4dH1cbiAgICAgICAgICA8L05leHRDb21wb25lbnQ+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59KVxuIl19