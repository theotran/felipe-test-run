'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactTableDefaults = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
//


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var _lifecycle = require('./lifecycle');

var _lifecycle2 = _interopRequireDefault(_lifecycle);

var _methods = require('./methods');

var _methods2 = _interopRequireDefault(_methods);

var _defaultProps = require('./defaultProps');

var _defaultProps2 = _interopRequireDefault(_defaultProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ReactTableDefaults = exports.ReactTableDefaults = _defaultProps2.default;

exports.default = _react2.default.createClass(_extends({
  displayName: 'src'
}, _lifecycle2.default, _methods2.default, {
  render: function render() {
    var _this = this;

    var resolvedState = this.getResolvedState();
    var children = resolvedState.children,
        className = resolvedState.className,
        style = resolvedState.style,
        getProps = resolvedState.getProps,
        getTableProps = resolvedState.getTableProps,
        getTheadGroupProps = resolvedState.getTheadGroupProps,
        getTheadGroupTrProps = resolvedState.getTheadGroupTrProps,
        getTheadGroupThProps = resolvedState.getTheadGroupThProps,
        getTheadProps = resolvedState.getTheadProps,
        getTheadTrProps = resolvedState.getTheadTrProps,
        getTheadThProps = resolvedState.getTheadThProps,
        getTheadFilterProps = resolvedState.getTheadFilterProps,
        getTheadFilterTrProps = resolvedState.getTheadFilterTrProps,
        getTheadFilterThProps = resolvedState.getTheadFilterThProps,
        getTbodyProps = resolvedState.getTbodyProps,
        getTrGroupProps = resolvedState.getTrGroupProps,
        getTrProps = resolvedState.getTrProps,
        getTdProps = resolvedState.getTdProps,
        getTfootProps = resolvedState.getTfootProps,
        getTfootTrProps = resolvedState.getTfootTrProps,
        getTfootTdProps = resolvedState.getTfootTdProps,
        getPaginationProps = resolvedState.getPaginationProps,
        getLoadingProps = resolvedState.getLoadingProps,
        getNoDataProps = resolvedState.getNoDataProps,
        getResizerProps = resolvedState.getResizerProps,
        showPagination = resolvedState.showPagination,
        expanderColumnWidth = resolvedState.expanderColumnWidth,
        manual = resolvedState.manual,
        loadingText = resolvedState.loadingText,
        noDataText = resolvedState.noDataText,
        showFilters = resolvedState.showFilters,
        resizable = resolvedState.resizable,
        loading = resolvedState.loading,
        pageSize = resolvedState.pageSize,
        page = resolvedState.page,
        sorting = resolvedState.sorting,
        filtering = resolvedState.filtering,
        resizing = resolvedState.resizing,
        pages = resolvedState.pages,
        pivotValKey = resolvedState.pivotValKey,
        subRowsKey = resolvedState.subRowsKey,
        expandedRows = resolvedState.expandedRows,
        onExpandRow = resolvedState.onExpandRow,
        TableComponent = resolvedState.TableComponent,
        TheadComponent = resolvedState.TheadComponent,
        TbodyComponent = resolvedState.TbodyComponent,
        TrGroupComponent = resolvedState.TrGroupComponent,
        TrComponent = resolvedState.TrComponent,
        ThComponent = resolvedState.ThComponent,
        TdComponent = resolvedState.TdComponent,
        TfootComponent = resolvedState.TfootComponent,
        ExpanderComponent = resolvedState.ExpanderComponent,
        PaginationComponent = resolvedState.PaginationComponent,
        LoadingComponent = resolvedState.LoadingComponent,
        SubComponent = resolvedState.SubComponent,
        NoDataComponent = resolvedState.NoDataComponent,
        ResizerComponent = resolvedState.ResizerComponent,
        resolvedData = resolvedState.resolvedData,
        allVisibleColumns = resolvedState.allVisibleColumns,
        headerGroups = resolvedState.headerGroups,
        hasHeaderGroups = resolvedState.hasHeaderGroups,
        sortedData = resolvedState.sortedData;

    // Pagination

    var startRow = pageSize * page;
    var endRow = startRow + pageSize;
    var pageRows = manual ? resolvedData : sortedData.slice(startRow, endRow);
    var minRows = this.getMinRows();
    var padRows = _utils2.default.range(Math.max(minRows - pageRows.length, 0));

    var hasColumnFooter = allVisibleColumns.some(function (d) {
      return d.footer;
    });

    var recurseRowsViewIndex = function recurseRowsViewIndex(rows) {
      var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;

      rows.forEach(function (row, i) {
        index++;
        row._viewIndex = index;
        var newPath = path.concat([i]);
        if (row[subRowsKey] && _utils2.default.get(expandedRows, newPath)) {
          index = recurseRowsViewIndex(row[subRowsKey], newPath, index);
        }
      });
      return index;
    };

    recurseRowsViewIndex(pageRows);

    var canPrevious = page > 0;
    var canNext = page + 1 < pages;

    var rowMinWidth = _utils2.default.sum(allVisibleColumns.map(function (d) {
      var resized = resizing.find(function (x) {
        return x.id === d.id;
      }) || {};
      return _utils2.default.getFirstDefined(resized.value, d.width, d.minWidth);
    }));

    var rowIndex = -1;

    var finalState = _extends({}, resolvedState, {
      startRow: startRow,
      endRow: endRow,
      pageRows: pageRows,
      minRows: minRows,
      padRows: padRows,
      hasColumnFooter: hasColumnFooter,
      canPrevious: canPrevious,
      canNext: canNext,
      rowMinWidth: rowMinWidth
    });

    // Visual Components

    var makeHeaderGroups = function makeHeaderGroups() {
      var theadGroupProps = _utils2.default.splitProps(getTheadGroupProps(finalState, undefined, undefined, _this));
      var theadGroupTrProps = _utils2.default.splitProps(getTheadGroupTrProps(finalState, undefined, undefined, _this));
      return _react2.default.createElement(
        TheadComponent,
        _extends({
          className: (0, _classnames2.default)('-headerGroups', theadGroupProps.className),
          style: _extends({}, theadGroupProps.style, {
            minWidth: rowMinWidth + 'px'
          })
        }, theadGroupProps.rest),
        _react2.default.createElement(
          TrComponent,
          _extends({
            className: theadGroupTrProps.className,
            style: theadGroupTrProps.style
          }, theadGroupTrProps.rest),
          headerGroups.map(makeHeaderGroup)
        )
      );
    };

    var makeHeaderGroup = function makeHeaderGroup(column, i) {
      var flex = _utils2.default.sum(column.columns.map(function (d) {
        var resized = resizing.find(function (x) {
          return x.id === d.id;
        }) || {};
        return d.width || resized.value ? 0 : d.minWidth;
      }));
      var width = _utils2.default.sum(column.columns.map(function (d) {
        var resized = resizing.find(function (x) {
          return x.id === d.id;
        }) || {};
        return _utils2.default.getFirstDefined(resized.value, d.width, d.minWidth);
      }));
      var maxWidth = _utils2.default.sum(column.columns.map(function (d) {
        var resized = resizing.find(function (x) {
          return x.id === d.id;
        }) || {};
        return _utils2.default.getFirstDefined(resized.value, d.width, d.maxWidth);
      }));
      var theadGroupThProps = _utils2.default.splitProps(getTheadGroupThProps(finalState, undefined, column, _this));
      var columnHeaderProps = _utils2.default.splitProps(column.getHeaderProps(finalState, undefined, column, _this));

      var classes = [column.headerClassName, theadGroupThProps.className, columnHeaderProps.className];

      var styles = _extends({}, column.headerStyle, theadGroupThProps.style, columnHeaderProps.style);

      var rest = _extends({}, theadGroupThProps.rest, columnHeaderProps.rest);

      var flexStyles = {
        flex: flex + ' 0 auto',
        width: width + 'px',
        maxWidth: maxWidth + 'px'
      };

      if (column.expander) {
        if (column.pivotColumns) {
          return _react2.default.createElement(ThComponent, _extends({
            key: i,
            className: (0, _classnames2.default)('rt-pivot-header', classes),
            style: _extends({}, styles, flexStyles)
          }, rest));
        }
        return _react2.default.createElement(ThComponent, _extends({
          key: i,
          className: (0, _classnames2.default)('rt-expander-header', classes),
          style: _extends({}, styles, {
            flex: '0 0 auto',
            width: expanderColumnWidth + 'px'
          })
        }, rest));
      }
      return _react2.default.createElement(
        ThComponent,
        _extends({
          key: i,
          className: (0, _classnames2.default)(classes),
          style: _extends({}, styles, flexStyles)
        }, rest),
        _utils2.default.normalizeComponent(column.header, {
          data: sortedData,
          column: column
        })
      );
    };

    var makeHeaders = function makeHeaders() {
      var theadProps = _utils2.default.splitProps(getTheadProps(finalState, undefined, undefined, _this));
      var theadTrProps = _utils2.default.splitProps(getTheadTrProps(finalState, undefined, undefined, _this));
      return _react2.default.createElement(
        TheadComponent,
        _extends({
          className: (0, _classnames2.default)('-header', theadProps.className),
          style: _extends({}, theadProps.style, {
            minWidth: rowMinWidth + 'px'
          })
        }, theadProps.rest),
        _react2.default.createElement(
          TrComponent,
          _extends({
            className: theadTrProps.className,
            style: theadTrProps.style
          }, theadTrProps.rest),
          allVisibleColumns.map(makeHeader)
        )
      );
    };

    var makeHeader = function makeHeader(column, i) {
      var resized = resizing.find(function (x) {
        return x.id === column.id;
      }) || {};
      var sort = sorting.find(function (d) {
        return d.id === column.id;
      });
      var show = typeof column.show === 'function' ? column.show() : column.show;
      var width = _utils2.default.getFirstDefined(resized.value, column.width, column.minWidth);
      var maxWidth = _utils2.default.getFirstDefined(resized.value, column.width, column.maxWidth);
      var theadThProps = _utils2.default.splitProps(getTheadThProps(finalState, undefined, column, _this));
      var columnHeaderProps = _utils2.default.splitProps(column.getHeaderProps(finalState, undefined, column, _this));

      var classes = [column.headerClassName, theadThProps.className, columnHeaderProps.className];

      var styles = _extends({}, column.headerStyle, theadThProps.style, columnHeaderProps.style);

      var rest = _extends({}, theadThProps.rest, columnHeaderProps.rest);

      var resizer = resizable ? _react2.default.createElement(ResizerComponent, _extends({
        onMouseDown: function onMouseDown(e) {
          return _this.resizeColumnStart(column, e, false);
        },
        onTouchStart: function onTouchStart(e) {
          return _this.resizeColumnStart(column, e, true);
        }
      }, resizerProps)) : null;

      if (column.expander) {
        if (column.pivotColumns) {
          var pivotSort = sorting.find(function (d) {
            return d.id === column.id;
          });
          return _react2.default.createElement(
            ThComponent,
            _extends({
              key: i,
              className: (0, _classnames2.default)('rt-pivot-header', 'rt-resizable-header', column.sortable && '-cursor-pointer', classes, pivotSort ? pivotSort.desc ? '-sort-desc' : '-sort-asc' : ''),
              style: _extends({}, styles, {
                flex: width + ' 0 auto',
                width: width + 'px',
                maxWidth: maxWidth + 'px'
              }),
              toggleSort: function toggleSort(e) {
                column.sortable && _this.sortColumn(column.pivotColumns, e.shiftKey);
              }
            }, rest),
            _react2.default.createElement(
              'div',
              { className: 'rt-resizable-header-content' },
              column.pivotColumns.map(function (pivotColumn, i) {
                return _react2.default.createElement(
                  'span',
                  { key: pivotColumn.id },
                  _utils2.default.normalizeComponent(pivotColumn.header, {
                    data: sortedData,
                    column: column
                  }),
                  i < column.pivotColumns.length - 1 && _react2.default.createElement(ExpanderComponent, null)
                );
              })
            ),
            resizer
          );
        }
        return _react2.default.createElement(ThComponent, _extends({
          key: i,
          className: (0, _classnames2.default)('rt-expander-header', classes),
          style: _extends({}, styles, {
            flex: '0 0 auto',
            width: expanderColumnWidth + 'px'
          })
        }, rest));
      }

      return _react2.default.createElement(
        ThComponent,
        _extends({
          key: i,
          className: (0, _classnames2.default)(classes, 'rt-resizable-header', sort ? sort.desc ? '-sort-desc' : '-sort-asc' : '', column.sortable && '-cursor-pointer', !show && '-hidden'),
          style: _extends({}, styles, {
            flex: width + ' 0 auto',
            width: width + 'px',
            maxWidth: maxWidth + 'px'
          }),
          toggleSort: function toggleSort(e) {
            column.sortable && _this.sortColumn(column, e.shiftKey);
          }
        }, rest),
        _react2.default.createElement(
          'div',
          { className: 'rt-resizable-header-content' },
          _utils2.default.normalizeComponent(column.header, {
            data: sortedData,
            column: column
          })
        ),
        resizer
      );
    };

    var makeFilters = function makeFilters() {
      var theadFilterProps = _utils2.default.splitProps(getTheadFilterProps(finalState, undefined, undefined, _this));
      var theadFilterTrProps = _utils2.default.splitProps(getTheadFilterTrProps(finalState, undefined, undefined, _this));
      return _react2.default.createElement(
        TheadComponent,
        _extends({
          className: (0, _classnames2.default)('-filters', theadFilterProps.className),
          style: _extends({}, theadFilterProps.style, {
            minWidth: rowMinWidth + 'px'
          })
        }, theadFilterProps.rest),
        _react2.default.createElement(
          TrComponent,
          _extends({
            className: theadFilterTrProps.className,
            style: theadFilterTrProps.style
          }, theadFilterTrProps.rest),
          allVisibleColumns.map(makeFilter)
        )
      );
    };

    var makeFilter = function makeFilter(column, i) {
      var resized = resizing.find(function (x) {
        return x.id === column.id;
      }) || {};
      var width = _utils2.default.getFirstDefined(resized.value, column.width, column.minWidth);
      var maxWidth = _utils2.default.getFirstDefined(resized.value, column.width, column.maxWidth);
      var theadFilterThProps = _utils2.default.splitProps(getTheadFilterThProps(finalState, undefined, column, _this));
      var columnHeaderProps = _utils2.default.splitProps(column.getHeaderProps(finalState, undefined, column, _this));

      var classes = [column.headerClassName, theadFilterThProps.className, columnHeaderProps.className];

      var styles = _extends({}, column.headerStyle, theadFilterThProps.style, columnHeaderProps.style);

      var rest = _extends({}, theadFilterThProps.rest, columnHeaderProps.rest);

      if (column.expander) {
        if (column.pivotColumns) {
          var pivotCols = [];

          var _loop = function _loop(_i) {
            var col = column.pivotColumns[_i];
            var filter = filtering.find(function (filter) {
              return filter.id === column.id && filter.pivotId === col.id;
            });
            pivotCols.push(_react2.default.createElement(
              'span',
              { key: col.id,
                style: { flex: 1 } },
              !col.hideFilter ? _utils2.default.normalizeComponent(col.filterRender, {
                col: col,
                filter: filter,
                onFilterChange: function onFilterChange(value) {
                  return _this.filterColumn(column, value, col);
                }
              }, _defaultProps2.default.column.filterRender) : null
            ));
            if (_i < column.pivotColumns.length - 1) {
              pivotCols.push(_react2.default.createElement(ExpanderComponent, { key: col.id + '-' + _i }));
            }
          };

          for (var _i = 0; _i < column.pivotColumns.length; _i++) {
            _loop(_i);
          }
          return _react2.default.createElement(
            ThComponent,
            _extends({
              key: i,
              className: (0, _classnames2.default)('rt-pivot-header', column.sortable && '-cursor-pointer', classes),
              style: _extends({}, styles, {
                flex: width + ' 0 auto',
                width: width + 'px',
                maxWidth: maxWidth + 'px',
                display: 'flex'
              })
            }, rest),
            pivotCols
          );
        }
        return _react2.default.createElement(ThComponent, _extends({
          key: i,
          className: (0, _classnames2.default)('rt-expander-header', classes),
          style: _extends({}, styles, {
            flex: '0 0 auto',
            width: expanderColumnWidth + 'px'
          })
        }, rest));
      }

      var filter = filtering.find(function (filter) {
        return filter.id === column.id;
      });

      return _react2.default.createElement(
        ThComponent,
        _extends({
          key: i,
          className: (0, _classnames2.default)(classes),
          style: _extends({}, styles, {
            flex: width + ' 0 auto',
            width: width + 'px',
            maxWidth: maxWidth + 'px'
          })
        }, rest),
        !column.hideFilter ? _utils2.default.normalizeComponent(column.filterRender, {
          column: column,
          filter: filter,
          onFilterChange: function onFilterChange(value) {
            return _this.filterColumn(column, value);
          }
        }, _defaultProps2.default.column.filterRender) : null
      );
    };

    var makePageRow = function makePageRow(row, i) {
      var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

      var rowInfo = {
        row: row.__original,
        rowValues: row,
        index: row.__index,
        viewIndex: ++rowIndex,
        level: path.length,
        nestingPath: path.concat([i]),
        aggregated: !!row[subRowsKey],
        subRows: row[subRowsKey]
      };
      var isExpanded = _utils2.default.get(expandedRows, rowInfo.nestingPath);
      var trGroupProps = getTrGroupProps(finalState, rowInfo, undefined, _this);
      var trProps = _utils2.default.splitProps(getTrProps(finalState, rowInfo, undefined, _this));
      return _react2.default.createElement(
        TrGroupComponent,
        _extends({
          key: rowInfo.nestingPath.join('_')
        }, trGroupProps),
        _react2.default.createElement(
          TrComponent,
          _extends({
            className: (0, _classnames2.default)(trProps.className, row._viewIndex % 2 ? '-even' : '-odd'),
            style: trProps.style
          }, trProps.rest),
          allVisibleColumns.map(function (column, i2) {
            var resized = resizing.find(function (x) {
              return x.id === column.id;
            }) || {};
            var show = typeof column.show === 'function' ? column.show() : column.show;
            var width = _utils2.default.getFirstDefined(resized.value, column.width, column.minWidth);
            var maxWidth = _utils2.default.getFirstDefined(resized.value, column.width, column.maxWidth);
            var tdProps = _utils2.default.splitProps(getTdProps(finalState, rowInfo, column, _this));
            var columnProps = _utils2.default.splitProps(column.getProps(finalState, rowInfo, column, _this));

            var classes = [tdProps.className, column.className, columnProps.className];

            var styles = _extends({}, tdProps.style, column.style, columnProps.style);

            if (column.expander) {
              var onTdClick = function onTdClick(e) {
                if (onExpandRow) {
                  return onExpandRow(rowInfo.nestingPath, e);
                }
                var newExpandedRows = _utils2.default.clone(expandedRows);
                if (isExpanded) {
                  return _this.setStateWithData({
                    expandedRows: _utils2.default.set(newExpandedRows, rowInfo.nestingPath, false)
                  });
                }
                return _this.setStateWithData({
                  expandedRows: _utils2.default.set(newExpandedRows, rowInfo.nestingPath, {})
                });
              };

              if (column.pivotColumns) {
                // Return the pivot expander cell
                var PivotCell = column.pivotRender;
                return _react2.default.createElement(
                  TdComponent,
                  _extends({
                    key: i2,
                    className: (0, _classnames2.default)('rt-pivot', classes),
                    style: _extends({}, styles, {
                      paddingLeft: rowInfo.nestingPath.length === 1 ? undefined : 30 * (rowInfo.nestingPath.length - 1) + 'px',
                      flex: width + ' 0 auto',
                      width: width + 'px',
                      maxWidth: maxWidth + 'px'
                    })
                  }, tdProps.rest, {
                    onClick: onTdClick
                  }),
                  rowInfo.subRows ? _react2.default.createElement(
                    'span',
                    null,
                    _react2.default.createElement(ExpanderComponent, {
                      isExpanded: isExpanded
                    }),
                    column && column.pivotRender ? _react2.default.createElement(PivotCell, _extends({}, rowInfo, {
                      value: rowInfo.rowValues[pivotValKey]
                    })) : _react2.default.createElement(
                      'span',
                      null,
                      row[pivotValKey],
                      ' (',
                      rowInfo.subRows.length,
                      ')'
                    )
                  ) : SubComponent ? _react2.default.createElement(
                    'span',
                    null,
                    _react2.default.createElement(ExpanderComponent, {
                      isExpanded: isExpanded
                    })
                  ) : null
                );
              }

              // Return the regular expander cell
              return _react2.default.createElement(
                TdComponent,
                {
                  key: i2,
                  className: (0, _classnames2.default)(classes, { hidden: !show }),
                  style: _extends({}, styles, {
                    flex: '0 0 auto',
                    width: expanderColumnWidth + 'px'
                  }),
                  onClick: onTdClick
                },
                _react2.default.createElement(
                  'span',
                  null,
                  _react2.default.createElement(ExpanderComponent, {
                    isExpanded: isExpanded
                  })
                )
              );
            }

            // Return regular cell
            return _react2.default.createElement(
              TdComponent,
              _extends({
                key: i2,
                className: (0, _classnames2.default)(classes, !show && 'hidden'),
                style: _extends({}, styles, {
                  flex: width + ' 0 auto',
                  width: width + 'px',
                  maxWidth: maxWidth + 'px'
                })
              }, tdProps.rest),
              _utils2.default.normalizeComponent(column.render, _extends({}, rowInfo, {
                value: rowInfo.rowValues[column.id]
              }), rowInfo.rowValues[column.id])
            );
          })
        ),
        rowInfo.subRows && isExpanded && rowInfo.subRows.map(function (d, i) {
          return makePageRow(d, i, rowInfo.nestingPath);
        }),
        SubComponent && !rowInfo.subRows && isExpanded && SubComponent(rowInfo)
      );
    };

    var makePadRow = function makePadRow(row, i) {
      var trGroupProps = getTrGroupProps(finalState, undefined, undefined, _this);
      var trProps = _utils2.default.splitProps(getTrProps(finalState, undefined, undefined, _this));
      return _react2.default.createElement(
        TrGroupComponent,
        _extends({
          key: i
        }, trGroupProps),
        _react2.default.createElement(
          TrComponent,
          {
            className: (0, _classnames2.default)('-padRow', trProps.className),
            style: trProps.style || {}
          },
          allVisibleColumns.map(function (column, i2) {
            var resized = resizing.find(function (x) {
              return x.id === column.id;
            }) || {};
            var show = typeof column.show === 'function' ? column.show() : column.show;
            var width = _utils2.default.getFirstDefined(resized.value, column.width, column.minWidth);
            var maxWidth = _utils2.default.getFirstDefined(resized.value, column.width, column.maxWidth);
            var tdProps = _utils2.default.splitProps(getTdProps(finalState, undefined, column, _this));
            var columnProps = _utils2.default.splitProps(column.getProps(finalState, undefined, column, _this));

            var classes = [tdProps.className, column.className, columnProps.className];

            var styles = _extends({}, tdProps.style, column.style, columnProps.style);

            return _react2.default.createElement(
              TdComponent,
              _extends({
                key: i2,
                className: (0, _classnames2.default)(classes, !show && 'hidden'),
                style: _extends({}, styles, {
                  flex: width + ' 0 auto',
                  width: width + 'px',
                  maxWidth: maxWidth + 'px'
                })
              }, tdProps.rest),
              '\xA0'
            );
          })
        )
      );
    };

    var makeColumnFooters = function makeColumnFooters() {
      var tFootProps = getTfootProps(finalState, undefined, undefined, _this);
      var tFootTrProps = _utils2.default.splitProps(getTfootTrProps(finalState, undefined, undefined, _this));
      return _react2.default.createElement(
        TfootComponent,
        _extends({
          className: tFootProps.className,
          style: _extends({}, tFootProps.style, {
            minWidth: rowMinWidth + 'px'
          })
        }, tFootProps.rest),
        _react2.default.createElement(
          TrComponent,
          _extends({
            className: (0, _classnames2.default)(tFootTrProps.className),
            style: tFootTrProps.style
          }, tFootTrProps.rest),
          allVisibleColumns.map(function (column, i2) {
            var resized = resizing.find(function (x) {
              return x.id === column.id;
            }) || {};
            var show = typeof column.show === 'function' ? column.show() : column.show;
            var width = _utils2.default.getFirstDefined(resized.value, column.width, column.minWidth);
            var maxWidth = _utils2.default.getFirstDefined(resized.value, column.width, column.maxWidth);
            var tFootTdProps = _utils2.default.splitProps(getTfootTdProps(finalState, undefined, undefined, _this));
            var columnProps = _utils2.default.splitProps(column.getProps(finalState, undefined, column, _this));
            var columnFooterProps = _utils2.default.splitProps(column.getFooterProps(finalState, undefined, column, _this));

            var classes = [tFootTdProps.className, column.className, columnProps.className, columnFooterProps.className];

            var styles = _extends({}, tFootTdProps.style, column.style, columnProps.style, columnFooterProps.style);

            if (column.expander) {
              if (column.pivotColumns) {
                return _react2.default.createElement(
                  TdComponent,
                  _extends({
                    key: i2,
                    className: (0, _classnames2.default)('rt-pivot', classes),
                    style: _extends({}, styles, {
                      flex: width + ' 0 auto',
                      width: width + 'px',
                      maxWidth: maxWidth + 'px'
                    })
                  }, columnProps.rest, tFootTdProps.rest, columnFooterProps.rest),
                  _utils2.default.normalizeComponent(column.footer)
                );
              }

              // Return the regular expander cell
              return _react2.default.createElement(TdComponent, {
                key: i2,
                className: (0, _classnames2.default)(classes, { hidden: !show }),
                style: _extends({}, styles, {
                  flex: '0 0 auto',
                  width: expanderColumnWidth + 'px'
                })
              });
            }

            // Return regular cell
            return _react2.default.createElement(
              TdComponent,
              _extends({
                key: i2,
                className: (0, _classnames2.default)(classes, !show && 'hidden'),
                style: _extends({}, styles, {
                  flex: width + ' 0 auto',
                  width: width + 'px',
                  maxWidth: maxWidth + 'px'
                })
              }, columnProps.rest, tFootTdProps.rest, columnFooterProps.rest),
              _utils2.default.normalizeComponent(column.footer, {
                data: sortedData,
                column: column
              })
            );
          })
        )
      );
    };

    var rootProps = _utils2.default.splitProps(getProps(finalState, undefined, undefined, this));
    var tableProps = _utils2.default.splitProps(getTableProps(finalState, undefined, undefined, this));
    var tBodyProps = _utils2.default.splitProps(getTbodyProps(finalState, undefined, undefined, this));
    var paginationProps = _utils2.default.splitProps(getPaginationProps(finalState, undefined, undefined, this));
    var loadingProps = getLoadingProps(finalState, undefined, undefined, this);
    var noDataProps = getNoDataProps(finalState, undefined, undefined, this);
    var resizerProps = getResizerProps(finalState, undefined, undefined, this);

    var makeTable = function makeTable() {
      return _react2.default.createElement(
        'div',
        _extends({
          className: (0, _classnames2.default)('ReactTable', className, rootProps.className),
          style: _extends({}, style, rootProps.style)
        }, rootProps.rest),
        _react2.default.createElement(
          TableComponent,
          _extends({
            className: (0, _classnames2.default)(tableProps.className),
            style: tableProps.style
          }, tableProps.rest),
          hasHeaderGroups ? makeHeaderGroups() : null,
          makeHeaders(),
          showFilters ? makeFilters() : null,
          _react2.default.createElement(
            TbodyComponent,
            _extends({
              className: (0, _classnames2.default)(tBodyProps.className),
              style: _extends({}, tBodyProps.style, {
                minWidth: rowMinWidth + 'px'
              })
            }, tBodyProps.rest),
            pageRows.map(function (d, i) {
              return makePageRow(d, i);
            }),
            padRows.map(makePadRow)
          ),
          hasColumnFooter ? makeColumnFooters() : null
        ),
        showPagination ? _react2.default.createElement(PaginationComponent, _extends({}, resolvedState, {
          pages: pages,
          canPrevious: canPrevious,
          canNext: canNext,
          onPageChange: _this.onPageChange,
          onPageSizeChange: _this.onPageSizeChange,
          className: paginationProps.className,
          style: paginationProps.style
        }, paginationProps.rest)) : null,
        !pageRows.length && _react2.default.createElement(
          NoDataComponent,
          noDataProps,
          _utils2.default.normalizeComponent(noDataText)
        ),
        _react2.default.createElement(LoadingComponent, _extends({
          loading: loading,
          loadingText: loadingText
        }, loadingProps))
      );
    };

    // childProps are optionally passed to a function-as-a-child
    return children ? children(finalState, makeTable, this) : makeTable();
  }
}));
//# sourceMappingURL=data:application/json;base64,