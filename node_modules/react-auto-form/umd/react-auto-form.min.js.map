{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///react-auto-form.min.js","webpack:///webpack/bootstrap 6c7f795767c842d3b700","webpack:///./src/index.js","webpack:///./~/get-form-data/lib/index.js","webpack:///external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_2__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_objectWithoutProperties","keys","target","i","indexOf","Object","prototype","hasOwnProperty","_extends","assign","arguments","length","source","key","_getFormData","_getFormData2","_react","_react2","AutoForm","createClass","displayName","propTypes","component","PropTypes","any","onChange","func","onSubmit","trim","bool","trimOnSubmit","getDefaultProps","_onChange","e","_e$target","form","name","data","getNamedFormElementData","props","change","_onSubmit","render","_props","children","Component","createElement","getFormData","options","undefined","Error","elementName","elementNames","elementNameLookup","l","elements","element","IGNORED_ELEMENT_TYPES","type","disabled","push","value","toString","NODE_LIST_CLASSES","getFormElementValue","allRadios","concat","selectedIndex","selected","multiple","slice","files","CHECKED_INPUT_TYPES","checked","replace","TRIM_RE","[object HTMLCollection]","[object NodeList]","[object RadioNodeList]","button","fieldset","reset","submit","checkbox","radio","Array"],"mappings":"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","file":"react-auto-form.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AutoForm\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"AutoForm\"] = factory(root[\"React\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AutoForm\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"AutoForm\"] = factory(root[\"React\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\t\n\tvar _getFormData = __webpack_require__(1);\n\t\n\tvar _getFormData2 = _interopRequireDefault(_getFormData);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar AutoForm = _react2['default'].createClass({\n\t  displayName: 'AutoForm',\n\t\n\t  propTypes: {\n\t    component: _react.PropTypes.any,\n\t    onChange: _react.PropTypes.func,\n\t    onSubmit: _react.PropTypes.func,\n\t    trim: _react.PropTypes.bool,\n\t    trimOnSubmit: _react.PropTypes.bool\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      component: 'form',\n\t      trim: false,\n\t      trimOnSubmit: false\n\t    };\n\t  },\n\t\n\t  _onChange: function _onChange(e) {\n\t    var _e$target = e.target;\n\t    var form = _e$target.form;\n\t    var name = _e$target.name;\n\t\n\t    var data = _getFormData.getNamedFormElementData(form, name, { trim: this.props.trim });\n\t    var change = {};\n\t    change[name] = data;\n\t    this.props.onChange(e, name, data, change);\n\t  },\n\t\n\t  _onSubmit: function _onSubmit(e) {\n\t    var data = _getFormData2['default'](e.target, { trim: this.props.trimOnSubmit || this.props.trim });\n\t    this.props.onSubmit(e, data);\n\t  },\n\t\n\t  render: function render() {\n\t    var _props = this.props;\n\t    var children = _props.children;\n\t    var Component = _props.component;\n\t    var onChange = _props.onChange;\n\t    var onSubmit = _props.onSubmit;\n\t    var trim = _props.trim;\n\t    var trimOnSubmit = _props.trimOnSubmit;\n\t\n\t    var props = _objectWithoutProperties(_props, ['children', 'component', 'onChange', 'onSubmit', 'trim', 'trimOnSubmit']);\n\t\n\t    return _react2['default'].createElement(Component, _extends({}, props, {\n\t      children: children,\n\t      onChange: onChange && this._onChange,\n\t      onSubmit: onSubmit && this._onSubmit\n\t    }));\n\t  }\n\t});\n\t\n\texports['default'] = AutoForm;\n\tmodule.exports = exports['default'];\n\t// eslint-disable-line no-unused-vars\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\tvar NODE_LIST_CLASSES = {\n\t  '[object HTMLCollection]': true,\n\t  '[object NodeList]': true,\n\t  '[object RadioNodeList]': true\n\t};\n\t\n\t// .type values for elements which can appear in .elements and should be ignored\n\tvar IGNORED_ELEMENT_TYPES = {\n\t  'button': true,\n\t  'fieldset': true,\n\t  // 'keygen': true,\n\t  // 'output': true,\n\t  'reset': true,\n\t  'submit': true\n\t};\n\t\n\tvar CHECKED_INPUT_TYPES = {\n\t  'checkbox': true,\n\t  'radio': true\n\t};\n\t\n\tvar TRIM_RE = /^\\s+|\\s+$/g;\n\t\n\tvar slice = Array.prototype.slice;\n\tvar toString = Object.prototype.toString;\n\t\n\t/**\n\t * @param {HTMLFormElement} form\n\t * @param {Object} options\n\t * @return {Object.<string,(string|Array.<string>)>} an object containing\n\t *   submittable value(s) held in the form's .elements collection, with\n\t *   properties named as per element names or ids.\n\t */\n\tfunction getFormData(form) {\n\t  var options = arguments.length <= 1 || arguments[1] === undefined ? { trim: false } : arguments[1];\n\t\n\t  if (!form) {\n\t    throw new Error('A form is required by getFormData, was given form=' + form);\n\t  }\n\t\n\t  var data = {};\n\t  var elementName = undefined;\n\t  var elementNames = [];\n\t  var elementNameLookup = {};\n\t\n\t  // Get unique submittable element names for the form\n\t  for (var i = 0, l = form.elements.length; i < l; i++) {\n\t    var element = form.elements[i];\n\t    if (IGNORED_ELEMENT_TYPES[element.type] || element.disabled) {\n\t      continue;\n\t    }\n\t    elementName = element.name || element.id;\n\t    if (elementName && !elementNameLookup[elementName]) {\n\t      elementNames.push(elementName);\n\t      elementNameLookup[elementName] = true;\n\t    }\n\t  }\n\t\n\t  // Extract element data name-by-name for consistent handling of special cases\n\t  // around elements which contain multiple inputs.\n\t  for (var i = 0, l = elementNames.length; i < l; i++) {\n\t    elementName = elementNames[i];\n\t    var value = getNamedFormElementData(form, elementName, options);\n\t    if (value != null) {\n\t      data[elementName] = value;\n\t    }\n\t  }\n\t\n\t  return data;\n\t}\n\t\n\t/**\n\t * @param {HTMLFormElement} form\n\t * @param {string} elementName\n\t * @param {Object} options\n\t * @return {(string|Array.<string>)} submittable value(s) in the form for a\n\t *   named element from its .elements collection, or null if there was no\n\t *   element with that name or the element had no submittable value(s).\n\t */\n\tfunction getNamedFormElementData(form, elementName) {\n\t  var options = arguments.length <= 2 || arguments[2] === undefined ? { trim: false } : arguments[2];\n\t\n\t  if (!form) {\n\t    throw new Error('A form is required by getNamedFormElementData, was given form=' + form);\n\t  }\n\t  if (!elementName && toString.call(elementName) !== '[object String]') {\n\t    throw new Error('A form element name is required by getNamedFormElementData, was given elementName=' + elementName);\n\t  }\n\t\n\t  var element = form.elements[elementName];\n\t  if (!element || element.disabled) {\n\t    return null;\n\t  }\n\t\n\t  if (!NODE_LIST_CLASSES[toString.call(element)]) {\n\t    return getFormElementValue(element, options.trim);\n\t  }\n\t\n\t  // Deal with multiple form controls which have the same name\n\t  var data = [];\n\t  var allRadios = true;\n\t  for (var i = 0, l = element.length; i < l; i++) {\n\t    if (element[i].disabled) {\n\t      continue;\n\t    }\n\t    if (allRadios && element[i].type !== 'radio') {\n\t      allRadios = false;\n\t    }\n\t    var value = getFormElementValue(element[i], options.trim);\n\t    if (value != null) {\n\t      data = data.concat(value);\n\t    }\n\t  }\n\t\n\t  // Special case for an element with multiple same-named inputs which were all\n\t  // radio buttons: if there was a selected value, only return the value.\n\t  if (allRadios && data.length === 1) {\n\t    return data[0];\n\t  }\n\t\n\t  return data.length > 0 ? data : null;\n\t}\n\t\n\t/**\n\t * @param {HTMLElement} element a form element.\n\t * @param {booleam} trim should values for text entry inputs be trimmed?\n\t * @return {(string|Array.<string>|File|Array.<File>)} the element's submittable\n\t *   value(s), or null if it had none.\n\t */\n\tfunction getFormElementValue(element, trim) {\n\t  var value = null;\n\t  var type = element.type;\n\t\n\t  if (type === 'select-one') {\n\t    if (element.options.length) {\n\t      value = element.options[element.selectedIndex].value;\n\t    }\n\t    return value;\n\t  }\n\t\n\t  if (type === 'select-multiple') {\n\t    value = [];\n\t    for (var i = 0, l = element.options.length; i < l; i++) {\n\t      if (element.options[i].selected) {\n\t        value.push(element.options[i].value);\n\t      }\n\t    }\n\t    if (value.length === 0) {\n\t      value = null;\n\t    }\n\t    return value;\n\t  }\n\t\n\t  // If a file input doesn't have a files attribute, fall through to using its\n\t  // value attribute.\n\t  if (type === 'file' && 'files' in element) {\n\t    if (element.multiple) {\n\t      value = slice.call(element.files);\n\t      if (value.length === 0) {\n\t        value = null;\n\t      }\n\t    } else {\n\t      // Should be null if not present, according to the spec\n\t      value = element.files[0];\n\t    }\n\t    return value;\n\t  }\n\t\n\t  if (!CHECKED_INPUT_TYPES[type]) {\n\t    value = trim ? element.value.replace(TRIM_RE, '') : element.value;\n\t  } else if (element.checked) {\n\t    value = element.value;\n\t  }\n\t\n\t  return value;\n\t}\n\t\n\tgetFormData.getNamedFormElementData = getNamedFormElementData;\n\t\n\texports['default'] = getFormData;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** react-auto-form.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 6c7f795767c842d3b700\n **/","import getFormData, {getNamedFormElementData as getFieldData} from 'get-form-data'\nimport React, {PropTypes as t} from 'react'\n\nlet AutoForm = React.createClass({\n  propTypes: {\n    component: t.any,\n    onChange: t.func,\n    onSubmit: t.func,\n    trim: t.bool,\n    trimOnSubmit: t.bool,\n  },\n\n  getDefaultProps() {\n    return {\n      component: 'form',\n      trim: false,\n      trimOnSubmit: false,\n    }\n  },\n\n  _onChange(e) {\n    let {form, name} = e.target\n    let data = getFieldData(form, name, {trim: this.props.trim})\n    let change = {}\n    change[name] = data\n    this.props.onChange(e, name, data, change)\n  },\n\n  _onSubmit(e) {\n    let data = getFormData(e.target, {trim: this.props.trimOnSubmit || this.props.trim})\n    this.props.onSubmit(e, data)\n  },\n\n  render() {\n    let {\n      children, component: Component, onChange, onSubmit,\n      trim, trimOnSubmit, // eslint-disable-line no-unused-vars\n      ...props,\n    } = this.props\n    return <Component\n      {...props}\n      children={children}\n      onChange={onChange && this._onChange}\n      onSubmit={onSubmit && this._onSubmit}\n    />\n  }\n})\n\nexport default AutoForm\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","'use strict';\n\nexports.__esModule = true;\nvar NODE_LIST_CLASSES = {\n  '[object HTMLCollection]': true,\n  '[object NodeList]': true,\n  '[object RadioNodeList]': true\n};\n\n// .type values for elements which can appear in .elements and should be ignored\nvar IGNORED_ELEMENT_TYPES = {\n  'button': true,\n  'fieldset': true,\n  // 'keygen': true,\n  // 'output': true,\n  'reset': true,\n  'submit': true\n};\n\nvar CHECKED_INPUT_TYPES = {\n  'checkbox': true,\n  'radio': true\n};\n\nvar TRIM_RE = /^\\s+|\\s+$/g;\n\nvar slice = Array.prototype.slice;\nvar toString = Object.prototype.toString;\n\n/**\n * @param {HTMLFormElement} form\n * @param {Object} options\n * @return {Object.<string,(string|Array.<string>)>} an object containing\n *   submittable value(s) held in the form's .elements collection, with\n *   properties named as per element names or ids.\n */\nfunction getFormData(form) {\n  var options = arguments.length <= 1 || arguments[1] === undefined ? { trim: false } : arguments[1];\n\n  if (!form) {\n    throw new Error('A form is required by getFormData, was given form=' + form);\n  }\n\n  var data = {};\n  var elementName = undefined;\n  var elementNames = [];\n  var elementNameLookup = {};\n\n  // Get unique submittable element names for the form\n  for (var i = 0, l = form.elements.length; i < l; i++) {\n    var element = form.elements[i];\n    if (IGNORED_ELEMENT_TYPES[element.type] || element.disabled) {\n      continue;\n    }\n    elementName = element.name || element.id;\n    if (elementName && !elementNameLookup[elementName]) {\n      elementNames.push(elementName);\n      elementNameLookup[elementName] = true;\n    }\n  }\n\n  // Extract element data name-by-name for consistent handling of special cases\n  // around elements which contain multiple inputs.\n  for (var i = 0, l = elementNames.length; i < l; i++) {\n    elementName = elementNames[i];\n    var value = getNamedFormElementData(form, elementName, options);\n    if (value != null) {\n      data[elementName] = value;\n    }\n  }\n\n  return data;\n}\n\n/**\n * @param {HTMLFormElement} form\n * @param {string} elementName\n * @param {Object} options\n * @return {(string|Array.<string>)} submittable value(s) in the form for a\n *   named element from its .elements collection, or null if there was no\n *   element with that name or the element had no submittable value(s).\n */\nfunction getNamedFormElementData(form, elementName) {\n  var options = arguments.length <= 2 || arguments[2] === undefined ? { trim: false } : arguments[2];\n\n  if (!form) {\n    throw new Error('A form is required by getNamedFormElementData, was given form=' + form);\n  }\n  if (!elementName && toString.call(elementName) !== '[object String]') {\n    throw new Error('A form element name is required by getNamedFormElementData, was given elementName=' + elementName);\n  }\n\n  var element = form.elements[elementName];\n  if (!element || element.disabled) {\n    return null;\n  }\n\n  if (!NODE_LIST_CLASSES[toString.call(element)]) {\n    return getFormElementValue(element, options.trim);\n  }\n\n  // Deal with multiple form controls which have the same name\n  var data = [];\n  var allRadios = true;\n  for (var i = 0, l = element.length; i < l; i++) {\n    if (element[i].disabled) {\n      continue;\n    }\n    if (allRadios && element[i].type !== 'radio') {\n      allRadios = false;\n    }\n    var value = getFormElementValue(element[i], options.trim);\n    if (value != null) {\n      data = data.concat(value);\n    }\n  }\n\n  // Special case for an element with multiple same-named inputs which were all\n  // radio buttons: if there was a selected value, only return the value.\n  if (allRadios && data.length === 1) {\n    return data[0];\n  }\n\n  return data.length > 0 ? data : null;\n}\n\n/**\n * @param {HTMLElement} element a form element.\n * @param {booleam} trim should values for text entry inputs be trimmed?\n * @return {(string|Array.<string>|File|Array.<File>)} the element's submittable\n *   value(s), or null if it had none.\n */\nfunction getFormElementValue(element, trim) {\n  var value = null;\n  var type = element.type;\n\n  if (type === 'select-one') {\n    if (element.options.length) {\n      value = element.options[element.selectedIndex].value;\n    }\n    return value;\n  }\n\n  if (type === 'select-multiple') {\n    value = [];\n    for (var i = 0, l = element.options.length; i < l; i++) {\n      if (element.options[i].selected) {\n        value.push(element.options[i].value);\n      }\n    }\n    if (value.length === 0) {\n      value = null;\n    }\n    return value;\n  }\n\n  // If a file input doesn't have a files attribute, fall through to using its\n  // value attribute.\n  if (type === 'file' && 'files' in element) {\n    if (element.multiple) {\n      value = slice.call(element.files);\n      if (value.length === 0) {\n        value = null;\n      }\n    } else {\n      // Should be null if not present, according to the spec\n      value = element.files[0];\n    }\n    return value;\n  }\n\n  if (!CHECKED_INPUT_TYPES[type]) {\n    value = trim ? element.value.replace(TRIM_RE, '') : element.value;\n  } else if (element.checked) {\n    value = element.value;\n  }\n\n  return value;\n}\n\ngetFormData.getNamedFormElementData = getNamedFormElementData;\n\nexports['default'] = getFormData;\nmodule.exports = exports['default'];\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/get-form-data/lib/index.js\n ** module id = 1\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}