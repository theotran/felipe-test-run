(function webpackUniversalModuleDefinition(root, factory) {
  if(typeof exports === 'object' && typeof module === 'object')
    module.exports = factory(require("react"), require("prop-types"), require("react-dnd-html5-backend"), require("react-dnd"), require("classnames"), require("moment"));
  else if(typeof define === 'function' && define.amd)
    define(["react", "prop-types", "react-dnd-html5-backend", "react-dnd", "classnames", "moment"], factory);
  else if(typeof exports === 'object')
    exports["react-keyed-file-browser"] = factory(require("react"), require("prop-types"), require("react-dnd-html5-backend"), require("react-dnd"), require("classnames"), require("moment"));
  else
    root["react-keyed-file-browser"] = factory(root["react"], root["prop-types"], root["react-dnd-html5-backend"], root["react-dnd"], root["classnames"], root["moment"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_11__) {
return /******/ (function(modules) { // webpackBootstrap
/******/  // The module cache
/******/  var installedModules = {};

/******/  // The require function
/******/  function __webpack_require__(moduleId) {

/******/    // Check if module is in cache
/******/    if(installedModules[moduleId])
/******/      return installedModules[moduleId].exports;

/******/    // Create a new module (and put it into the cache)
/******/    var module = installedModules[moduleId] = {
/******/      exports: {},
/******/      id: moduleId,
/******/      loaded: false
/******/    };

/******/    // Execute the module function
/******/    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/    // Flag the module as loaded
/******/    module.loaded = true;

/******/    // Return the exports of the module
/******/    return module.exports;
/******/  }


/******/  // expose the modules object (__webpack_modules__)
/******/  __webpack_require__.m = modules;

/******/  // expose the module cache
/******/  __webpack_require__.c = installedModules;

/******/  // __webpack_public_path__
/******/  __webpack_require__.p = "";

/******/  // Load entry module and return exports
/******/  return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BaseFolderConnectors = exports.BaseFolder = exports.BaseFileConnectors = exports.BaseFile = undefined;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _react = __webpack_require__(1);

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = __webpack_require__(2);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactDndHtml5Backend = __webpack_require__(3);

  var _reactDndHtml5Backend2 = _interopRequireDefault(_reactDndHtml5Backend);

  var _reactDnd = __webpack_require__(4);

  var _baseFolder = __webpack_require__(5);

  var _baseFolder2 = _interopRequireDefault(_baseFolder);

  var _baseFile = __webpack_require__(6);

  var _baseFile2 = _interopRequireDefault(_baseFile);

  var _table = __webpack_require__(7);

  var _table2 = _interopRequireDefault(_table);

  var _table3 = __webpack_require__(9);

  var _table4 = _interopRequireDefault(_table3);

  var _table5 = __webpack_require__(10);

  var _table6 = _interopRequireDefault(_table5);

  var _byFolder = __webpack_require__(12);

  var _byFolder2 = _interopRequireDefault(_byFolder);

  var _byName = __webpack_require__(13);

  var _byName2 = _interopRequireDefault(_byName);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
  // drag and drop


  // base renderers

  // default renderers


  // default processors


  var SEARCH_RESULTS_PER_PAGE = 20;

  function getItemProps(file, browserProps) {
    return {
      key: 'file-' + file.key,
      fileKey: file.key,
      isSelected: file.key == browserProps.selection,
      isOpen: file.key in browserProps.openFolders || browserProps.nameFilter,
      isRenaming: browserProps.activeAction == 'rename' && browserProps.actionTarget == file.key,
      isDeleting: browserProps.activeAction == 'delete' && browserProps.actionTarget == file.key,
      isDraft: !!file.draft
    };
  }

  var DefaultDetail = function (_React$Component) {
    _inherits(DefaultDetail, _React$Component);

    function DefaultDetail(props) {
      _classCallCheck(this, DefaultDetail);

      var _this = _possibleConstructorReturn(this, (DefaultDetail.__proto__ || Object.getPrototypeOf(DefaultDetail)).call(this, props));

      _this.handleCloseClick = _this.handleCloseClick.bind(_this);
      return _this;
    }

    _createClass(DefaultDetail, [{
      key: 'handleCloseClick',
      value: function handleCloseClick(event) {
        if (event) {
          event.preventDefault();
        }
        this.props.close();
      }
    }, {
      key: 'render',
      value: function render() {
        var name = this.props.file.key.split('/');
        name = name.length ? name[name.length - 1] : '';

        return _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'h2',
            null,
            'Item Detail'
          ),
          _react2.default.createElement(
            'dl',
            null,
            _react2.default.createElement(
              'dt',
              null,
              'Key'
            ),
            _react2.default.createElement(
              'dd',
              null,
              this.props.file.key
            ),
            _react2.default.createElement(
              'dt',
              null,
              'Name'
            ),
            _react2.default.createElement(
              'dd',
              null,
              name
            ),
            _react2.default.createElement(
              'a',
              { href: this.props.file.url, className: 'unique', target: "_blank" },
              'Link'
            )
          ),
          _react2.default.createElement(
            'a',
            { href: '#', className: 'unique', onClick: this.handleCloseClick },
            'Close'
          )
        );
      }
    }]);

    return DefaultDetail;
  }(_react2.default.Component);

  var FileBrowser = function (_React$Component2) {
    _inherits(FileBrowser, _React$Component2);

    function FileBrowser(props) {
      _classCallCheck(this, FileBrowser);

      var _this2 = _possibleConstructorReturn(this, (FileBrowser.__proto__ || Object.getPrototypeOf(FileBrowser)).call(this, props));

      _this2.handleGlobalClick = _this2.handleGlobalClick.bind(_this2);
      // browser manipulation
      _this2.select = _this2.select.bind(_this2);
      _this2.openFolder = _this2.openFolder.bind(_this2);
      _this2.toggleFolder = _this2.toggleFolder.bind(_this2);
      _this2.beginAction = _this2.beginAction.bind(_this2);
      _this2.endAction = _this2.endAction.bind(_this2);
      _this2.preview = _this2.preview.bind(_this2);
      // file manipulation
      _this2.renameFile = _this2.renameFile.bind(_this2);
      _this2.renameFolder = _this2.renameFolder.bind(_this2);
      _this2.moveFile = _this2.moveFile.bind(_this2);
      _this2.moveFolder = _this2.moveFolder.bind(_this2);
      _this2.createFiles = _this2.createFiles.bind(_this2);
      _this2.createFolder = _this2.createFolder.bind(_this2);
      _this2.deleteFile = _this2.deleteFile.bind(_this2);
      _this2.deleteFolder = _this2.deleteFolder.bind(_this2);
      // action bar
      _this2.handleActionBarRenameClick = _this2.handleActionBarRenameClick.bind(_this2);
      _this2.handleActionBarDeleteClick = _this2.handleActionBarDeleteClick.bind(_this2);
      _this2.handleActionBarAddFolderClick = _this2.handleActionBarAddFolderClick.bind(_this2);
      // detail
      _this2.closeDetail = _this2.closeDetail.bind(_this2);

      _this2.state = _extends({}, _this2.state, {

        openFolders: {},
        selection: null,
        activeAction: null,
        actionTarget: null,

        nameFilter: '',
        searchResultsShown: SEARCH_RESULTS_PER_PAGE,

        previewFile: null,

        addFolder: null
      });
      return _this2;
    }

    _createClass(FileBrowser, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (this.props.renderStyle == 'table' && this.props.nestChildren) {
          console.warn('Invalid settings: Cannot nest table children in file browser');
        }

        window.addEventListener('click', this.handleGlobalClick);
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        window.removeEventListener('click', this.handleGlobalClick);
      }

      // item manipulation

    }, {
      key: 'renameFile',
      value: function renameFile(oldKey, newKey) {
        var _this3 = this;

        this.setState({
          activeAction: null,
          actionTarget: null,
          selection: newKey
        }, function () {
          _this3.props.onRenameFile(oldKey, newKey);
        });
      }
    }, {
      key: 'renameFolder',
      value: function renameFolder(oldKey, newKey) {
        var _this4 = this;

        this.setState(function (state) {
          state.activeAction = null;
          state.actionTarget = null;
          if (state.selection.substr(0, oldKey.length) === oldKey) {
            state.selection = state.selection.replace(oldKey, newKey);
          }
          if (oldKey in state.openFolders) {
            state.openFolders = _extends({}, state.openFolders);
            delete state.openFolders[newKey];
            state.openFolders[newKey] = true;
          }
          return state;
        }, function () {
          _this4.props.onRenameFolder(oldKey, newKey);
        });
      }
    }, {
      key: 'moveFile',
      value: function moveFile(oldKey, newKey) {
        var _this5 = this;

        this.setState({
          activeAction: null,
          actionTarget: null,
          selection: newKey
        }, function () {
          _this5.props.onMoveFile(oldKey, newKey);
        });
      }
    }, {
      key: 'moveFolder',
      value: function moveFolder(oldKey, newKey) {
        var _this6 = this;

        this.setState(function (state) {
          state.activeAction = null;
          state.actionTarget = null;
          state.selection = newKey;
          if (oldKey in state.openFolders) {
            state.openFolders = _extends({}, state.openFolders);
            delete state.openFolders[newKey];
            state.openFolders[newKey] = true;
          }
          return state;
        }, function () {
          _this6.props.onMoveFolder(oldKey, newKey);
        });
      }
    }, {
      key: 'createFiles',
      value: function createFiles(files, prefix) {
        var _this7 = this;

        this.setState(function (state) {
          state.openFolders = _extends({}, state.openFolders);
          if (prefix) {
            state.openFolders[prefix] = true;
          }
          state.selection = null;
          return state;
        }, function () {
          _this7.props.onCreateFiles(files, prefix);
        });
      }
    }, {
      key: 'createFolder',
      value: function createFolder(key) {
        this.setState(function (state) {
          state.activeAction = null;
          state.actionTarget = null;
          state.selection = key;
        }, this.props.onCreateFolder(key));
      }
    }, {
      key: 'deleteFile',
      value: function deleteFile(key) {
        this.props.onDeleteFile(key);
      }
    }, {
      key: 'deleteFolder',
      value: function deleteFolder(key) {
        this.props.onDeleteFolder(key);
      }

      // browser manipulation

    }, {
      key: 'beginAction',
      value: function beginAction(action, key) {
        this.setState(function (state) {
          state.activeAction = action;
          state.actionTarget = key;
          return state;
        });
      }
    }, {
      key: 'endAction',
      value: function endAction() {
        if (this.state.selection !== null && this.state.selection.indexOf('__new__') != -1) {
          this.setState({ selection: null });
        }
        this.beginAction(null, null);
      }
    }, {
      key: 'select',
      value: function select(key) {
        this.setState(function (state) {
          state.selection = key;
          if (state.actionTarget !== null && state.actionTarget !== key) {
            state.actionTarget = null;
            state.activeAction = null;
          }
          return state;
        });
      }
    }, {
      key: 'preview',
      value: function preview(file) {
        this.setState(function (state) {
          state.previewFile = file;
          return state;
        });
      }
    }, {
      key: 'closeDetail',
      value: function closeDetail() {
        this.setState(function (state) {
          state.previewFile = null;
          return state;
        });
      }
    }, {
      key: 'handleShowMoreClick',
      value: function handleShowMoreClick(event) {
        event.preventDefault();
        this.setState(function (state) {
          state.searchResultsShown += SEARCH_RESULTS_PER_PAGE;
          return state;
        });
      }
    }, {
      key: 'toggleFolder',
      value: function toggleFolder(folderKey) {
        this.setState(function (state) {
          if (folderKey in state.openFolders) delete state.openFolders[folderKey];else state.openFolders[folderKey] = true;
          return state;
        });
      }
    }, {
      key: 'openFolder',
      value: function openFolder(folderKey) {
        this.setState(function (state) {
          state.openFolders[folderKey] = true;
          return state;
        });
      }

      // event handlers

    }, {
      key: 'handleGlobalClick',
      value: function handleGlobalClick(event) {
        var inBrowser = !!this.refs.browser.contains(event.target);
        var inPreview = !!(typeof this.refs.preview !== 'undefined' && this.refs.preview.contains(event.target));
        if (!inBrowser && !inPreview) {
          this.setState(function (state) {
            state.selection = null;
            state.actionTarget = null;
            state.activeAction = null;
            return state;
          });
        }
      }
    }, {
      key: 'handleActionBarRenameClick',
      value: function handleActionBarRenameClick(event) {
        event.preventDefault();
        this.beginAction('rename', this.state.selection);
      }
    }, {
      key: 'handleActionBarDeleteClick',
      value: function handleActionBarDeleteClick(event) {
        event.preventDefault();
        this.beginAction('delete', this.state.selection);
      }
    }, {
      key: 'handleActionBarAddFolderClick',
      value: function handleActionBarAddFolderClick(event) {
        var _this8 = this;

        event.preventDefault();
        if (this.state.activeAction === 'createFolder') {
          return;
        }
        var addKey = '';
        if (this.state.selection) {
          addKey += this.state.selection;
          if (addKey.substr(addKey.length - 1, addKey.length) !== '/') {
            addKey += '/';
          }
        }
        addKey += '__new__/';
        this.setState(function (state) {
          state.actionTarget = addKey;
          state.activeAction = 'createFolder';
          state.selection = addKey;
          state.openFolders = _extends({}, state.openFolders);
          if (_this8.state.selection) {
            state.openFolders[_this8.state.selection] = true;
          }
          return state;
        });
      }
    }, {
      key: 'handleFilterChange',
      value: function handleFilterChange(event) {
        var newValue = this.refs.filter.value;
        this.setState(function (state) {
          state.nameFilter = newValue;
          state.searchResultsShown = SEARCH_RESULTS_PER_PAGE;
          return state;
        });
      }
    }, {
      key: 'clearFilter',
      value: function clearFilter() {
        this.setState(function (state) {
          state.nameFilter = '';
          return state;
        });
      }
    }, {
      key: 'getBrowserProps',
      value: function getBrowserProps() {
        return {
          // browser config
          nestChildren: this.props.nestChildren,
          folderRenderer: this.props.folderRenderer,
          fileRenderer: this.props.fileRenderer,
          // browser state
          openFolders: this.state.openFolders,
          nameFilter: this.state.nameFilter,
          selection: this.state.selection,
          activeAction: this.state.activeAction,
          actionTarget: this.state.actionTarget,

          // browser manipulation
          select: this.select,
          openFolder: this.openFolder,
          toggleFolder: this.toggleFolder,
          beginAction: this.beginAction,
          endAction: this.endAction,
          preview: this.preview,

          // item manipulation
          renameFile: this.props.onRenameFile ? this.renameFile : undefined,
          renameFolder: this.props.onRenameFolder ? this.renameFolder : undefined,
          moveFile: this.props.onMoveFile ? this.moveFile : undefined,
          moveFolder: this.props.onMoveFolder ? this.moveFolder : undefined,
          createFiles: this.props.onCreateFiles ? this.createFiles : undefined,
          createFolder: this.props.onCreateFolder ? this.createFolder : undefined,
          deleteFile: this.props.onDeleteFile ? this.deleteFile : undefined,
          deleteFolder: this.props.onDeleteFolder ? this.deleteFolder : undefined,

          getItemProps: getItemProps
        };
      }
    }, {
      key: 'renderActionBar',
      value: function renderActionBar(selectedItem) {
        if (!this.props.showActionBar) {
          return null;
        }

        var selectionIsFolder = selectedItem && !selectedItem.size;
        var filter;
        if (this.props.canFilter) {
          filter = _react2.default.createElement('input', {
            ref: 'filter',
            type: 'search',
            placeholder: 'Filter files',
            value: this.state.nameFilter,
            onChange: this.handleFilterChange.bind(this)
          });
        }

        var actions;
        if (selectedItem) {
          if (selectedItem.action) {
            var actionText;
            switch (selectedItem.action) {
              case 'delete':
                actionText = 'Deleting ...';
                break;

              case 'rename':
                actionText = 'Renaming ...';
                break;

              default:
                actionText = 'Moving ...';
                break;
            }
            actions = _react2.default.createElement(
              'div',
              { className: 'item-actions' },
              _react2.default.createElement(LoadingSpinner, null),
              ' ',
              actionText
            );
          } else {
            actions = [];
            if (selectionIsFolder && typeof this.props.onCreateFolder === 'function' && !this.state.nameFilter) {
              actions.push(_react2.default.createElement(
                'li',
                { key: 'action-add-folder' },
                _react2.default.createElement(
                  'a',
                  {
                    className: 'btn btn-primary btn-sm',
                    onClick: this.handleActionBarAddFolderClick,
                    href: '#',
                    role: 'button'
                  },
                  _react2.default.createElement('i', { className: 'fa fa-folder-o', 'aria-hidden': 'true' }),
                  '\xA0Add Subfolder'
                )
              ));
            }
            if (selectedItem.keyDerived && (!selectionIsFolder && typeof this.props.onDeleteFile === 'function' || selectionIsFolder && typeof this.props.onDeleteFolder === 'function')) {
              actions.push(_react2.default.createElement(
                'li',
                { key: 'action-delete' },
                _react2.default.createElement(
                  'a',
                  {
                    className: 'btn btn-primary btn-sm',
                    onClick: this.handleActionBarDeleteClick,
                    href: '#',
                    role: 'button'
                  },
                  _react2.default.createElement('i', { className: 'fa fa-trash-o', 'aria-hidden': 'true' }),
                  '\xA0Delete'
                )
              ));
            }
            if (selectedItem.keyDerived && (selectionIsFolder && typeof this.props.onRenameFile === 'function' || !selectionIsFolder && typeof this.props.onRenameFolder === 'function')) {
              actions.push(_react2.default.createElement(
                'li',
                { key: 'action-rename' },
                _react2.default.createElement(
                  'a',
                  {
                    className: 'btn btn-primary btn-sm',
                    onClick: this.handleActionBarRenameClick,
                    href: '#',
                    role: 'button'
                  },
                  _react2.default.createElement('i', { className: 'fa fa-i-cursor', 'aria-hidden': 'true' }),
                  '\xA0Rename'
                )
              ));
            }

            if (actions.length) {
              actions = _react2.default.createElement(
                'ul',
                { className: 'item-actions' },
                actions
              );
            } else {
              actions = _react2.default.createElement(
                'div',
                { className: 'item-actions' },
                '\xA0'
              );
            }
          }
        } else {
          actions = [];

          if (typeof this.props.onCreateFolder === 'function' && !this.state.nameFilter) {
            actions.push(_react2.default.createElement(
              'li',
              { key: 'action-add-folder' },
              _react2.default.createElement(
                'a',
                {
                  className: 'btn btn-primary btn-sm',
                  onClick: this.handleActionBarAddFolderClick,
                  href: '#',
                  role: 'button'
                },
                _react2.default.createElement('i', { className: 'fa fa-folder-o', 'aria-hidden': 'true' }),
                '\xA0Add Folder'
              )
            ));
          }

          if (actions.length) {
            actions = _react2.default.createElement(
              'ul',
              { className: 'item-actions' },
              actions
            );
          } else {
            actions = _react2.default.createElement(
              'div',
              { className: 'item-actions' },
              '\xA0'
            );
          }
        }

        return _react2.default.createElement(
          'div',
          { className: 'action-bar' },
          filter,
          actions
        );
      }
    }, {
      key: 'renderFiles',
      value: function renderFiles(files, depth) {
        var _this9 = this;

        var browserProps = this.getBrowserProps();
        var renderedFiles = [];
        files.map(function (file) {
          var thisItemProps = _extends({}, browserProps.getItemProps(file, browserProps), {
            depth: _this9.state.nameFilter ? 0 : depth
          });

          if (file.size) {
            renderedFiles.push(_react2.default.createElement(_this9.props.fileRenderer, _extends({}, file, thisItemProps, {
              browserProps: browserProps
            })));
          } else {
            if (!_this9.state.nameFilter) {
              renderedFiles.push(_react2.default.createElement(_this9.props.folderRenderer, _extends({}, file, thisItemProps, {
                browserProps: browserProps
              })));
            }
            if (_this9.state.nameFilter || thisItemProps.isOpen && !browserProps.nestChildren) {
              renderedFiles = renderedFiles.concat(_this9.renderFiles(file.children, depth + 1));
            }
          }
        });
        return renderedFiles;
      }
    }, {
      key: 'render',
      value: function render() {
        var _this10 = this;

        var renderedFiles;
        var browserProps = this.getBrowserProps();
        var headerProps = {
          fileKey: '',
          browserProps: browserProps
        };

        var files = this.props.files.concat([]);
        if (this.state.activeAction === 'createFolder') {
          files.push({
            key: this.state.actionTarget,
            size: 0,
            draft: true
          });
        }
        if (this.state.nameFilter) {
          var filteredFiles = [];
          var terms = this.state.nameFilter.split(' ');
          files.map(function (file) {
            var skip = false;
            terms.map(function (term) {
              if (file.key.toLowerCase().trim().indexOf(term) == -1) {
                skip = true;
                return;
              }
            });
            if (skip) {
              return;
            }
            filteredFiles.push(file);
          });
          files = filteredFiles;
        }
        if (typeof this.props.group === 'function') {
          files = this.props.group(files, '');
        } else {
          var newFiles = [];
          files.map(function (file) {
            if (file.size) {
              newFiles.push(file);
            }
          });
          files = newFiles;
        }
        var selectedItem = null;
        var findSelected = function findSelected(item) {
          if (item.key === _this10.state.selection) {
            selectedItem = item;
          }
          if (item.children) {
            item.children.map(findSelected);
          }
        };
        files.map(findSelected);
        if (typeof this.props.sort === 'function') {
          files = this.props.sort(files);
        }

        switch (this.props.renderStyle) {
          case 'table':
            var contents = this.renderFiles(files, 0);
            if (!contents.length) {
              if (this.state.nameFilter) {
                contents = _react2.default.createElement(
                  'tr',
                  null,
                  _react2.default.createElement(
                    'td',
                    { colSpan: '100' },
                    'No files matching "',
                    this.state.nameFilter,
                    '".'
                  )
                );
              } else {
                contents = _react2.default.createElement(
                  'tr',
                  null,
                  _react2.default.createElement(
                    'td',
                    { colSpan: '100' },
                    'No files.'
                  )
                );
              }
            } else {
              if (this.state.nameFilter) {
                var numFiles = contents.length;
                contents = contents.slice(0, this.state.searchResultsShown);
                if (numFiles > contents.length) {
                  contents.push(_react2.default.createElement(
                    'tr',
                    { key: 'show-more' },
                    _react2.default.createElement(
                      'td',
                      { colSpan: '100' },
                      _react2.default.createElement(
                        'a',
                        {
                          onClick: this.handleShowMoreClick.bind(this),
                          className: 'btn btn-block btn-info',
                          href: '#'
                        },
                        'Show more results'
                      )
                    )
                  ));
                }
              }
            }

            var header;
            if (this.props.headerRenderer) {
              header = _react2.default.createElement(
                'thead',
                null,
                _react2.default.createElement(this.props.headerRenderer, headerProps)
              );
            }

            renderedFiles = _react2.default.createElement(
              'table',
              { cellSpacing: '0', cellPadding: '0' },
              header,
              _react2.default.createElement(
                'tbody',
                null,
                contents
              )
            );
            break;

          case 'list':
            var contents = this.renderFiles(files, 0);
            if (!contents.length) {
              if (this.state.nameFilter) contents = _react2.default.createElement(
                'p',
                { className: 'empty' },
                'No files matching "',
                this.state.nameFilter,
                '"'
              );else contents = _react2.default.createElement(
                'p',
                { className: 'empty' },
                'No files.'
              );
            } else {
              var more;
              if (this.state.nameFilter) {
                var numFiles = contents.length;
                contents = contents.slice(0, this.state.searchResultsShown);
                if (numFiles > contents.length) {
                  more = _react2.default.createElement(
                    'a',
                    {
                      onClick: this.handleShowMoreClick.bind(this),
                      className: 'btn btn-block btn-info',
                      href: '#'
                    },
                    'Show more results'
                  );
                }
              }
              contents = _react2.default.createElement(
                'div',
                null,
                _react2.default.createElement(
                  'ul',
                  null,
                  contents
                ),
                more
              );
            }

            var header;
            if (this.props.headerRenderer) {
              header = _react2.default.createElement(this.props.headerRenderer, headerProps);
            }

            renderedFiles = _react2.default.createElement(
              'div',
              null,
              header,
              contents
            );
            break;
        }

        var Detail = this.props.detailRenderer;
        return _react2.default.createElement(
          'div',
          { className: 'rendered-react-keyed-file-browser' },
          this.props.actions,
          _react2.default.createElement(
            'div',
            { className: 'rendered-file-browser', ref: 'browser' },
            this.props.showActionBar && this.renderActionBar(selectedItem),
            _react2.default.createElement(
              'div',
              { className: 'files' },
              renderedFiles
            )
          ),
          this.state.previewFile !== null && _react2.default.createElement(Detail, {
            file: this.state.previewFile,
            close: this.closeDetail
          })
        );
      }
    }]);

    return FileBrowser;
  }(_react2.default.Component);

  FileBrowser.defaultProps = {
    showActionBar: true,
    canFilter: true,

    group: _byFolder2.default,
    sort: _byName2.default,

    nestChildren: false,
    renderStyle: 'table',

    startOpen: false,

    headerRenderer: _table2.default,
    folderRenderer: _table4.default,
    fileRenderer: _table6.default,
    detailRenderer: DefaultDetail
  };
  FileBrowser.PropTypes = {
    showActionBar: _propTypes2.default.bool.isRequired,
    canFilter: _propTypes2.default.bool.isRequired,

    group: _propTypes2.default.func.isRequired,
    sort: _propTypes2.default.func.isRequired,

    nestChildren: _propTypes2.default.bool.isRequired,
    renderStyle: _propTypes2.default.oneOf(['list', 'table']).isRequired,

    startOpen: _propTypes2.default.bool.isRequired,

    headerRenderer: _propTypes2.default.func,
    folderRenderer: _propTypes2.default.func.isRequired,
    fileRenderer: _propTypes2.default.func.isRequired,
    detailRenderer: _propTypes2.default.func.isRequired,

    onCreateFolder: _propTypes2.default.func,
    onCreateFiles: _propTypes2.default.func,
    onMoveFolder: _propTypes2.default.func,
    onMoveFile: _propTypes2.default.func,
    onRenameFolder: _propTypes2.default.func,
    onRenameFile: _propTypes2.default.func,
    onDeleteFolder: _propTypes2.default.func,
    onDeleteFile: _propTypes2.default.func
  };

  exports.default = (0, _reactDnd.DragDropContext)(_reactDndHtml5Backend2.default)(FileBrowser);
  exports.BaseFile = _baseFile2.default;
  exports.BaseFileConnectors = _baseFile.BaseFileConnectors;
  exports.BaseFolder = _baseFolder2.default;
  exports.BaseFolderConnectors = _baseFolder.BaseFolderConnectors;

/***/ }),
/* 1 */
/***/ (function(module, exports) {

  module.exports = require("react");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

  module.exports = require("prop-types");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

  module.exports = require("react-dnd-html5-backend");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

  module.exports = require("react-dnd");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BaseFolderConnectors = undefined;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _react = __webpack_require__(1);

  var _react2 = _interopRequireDefault(_react);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var BaseFolder = function (_React$Component) {
    _inherits(BaseFolder, _React$Component);

    function BaseFolder(props) {
      _classCallCheck(this, BaseFolder);

      var _this = _possibleConstructorReturn(this, (BaseFolder.__proto__ || Object.getPrototypeOf(BaseFolder)).call(this, props));

      _this.selectAllNewName = _this.selectAllNewName.bind(_this);

      _this.handleFolderClick = _this.handleFolderClick.bind(_this);
      _this.handleFolderDoubleClick = _this.handleFolderDoubleClick.bind(_this);
      _this.handleRenameClick = _this.handleRenameClick.bind(_this);
      _this.handleNewNameChange = _this.handleNewNameChange.bind(_this);
      _this.handleRenameSubmit = _this.handleRenameSubmit.bind(_this);
      _this.handleDeleteClick = _this.handleDeleteClick.bind(_this);
      _this.handleDeleteSubmit = _this.handleDeleteSubmit.bind(_this);
      _this.handleCancelEdit = _this.handleCancelEdit.bind(_this);

      _this.toggleFolder = _this.toggleFolder.bind(_this);

      _this.connectDND = _this.connectDND.bind(_this);

      _this.state = _extends({}, _this.state, {

        newName: _this.props.isDraft ? 'New folder' : _this.getName()
      });
      return _this;
    }

    _createClass(BaseFolder, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (this.props.isDraft) {
          this.selectAllNewName();
        }
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate(oldProps, oldState) {
        if (!oldProps.isRenaming && this.props.isRenaming) {
          this.selectAllNewName();
        }
      }
    }, {
      key: 'selectAllNewName',
      value: function selectAllNewName() {
        var _this2 = this;

        window.requestAnimationFrame(function () {
          var currentName = _this2.refs.newName.value;
          _this2.refs.newName.setSelectionRange(0, currentName.length);
          _this2.refs.newName.focus();
        });
      }
    }, {
      key: 'getName',
      value: function getName() {
        if (this.props.name) {
          return this.props.name;
        }
        var folders = this.props.fileKey.split('/');
        return this.props.newName || folders[folders.length - 2];
      }
    }, {
      key: 'handleFolderClick',
      value: function handleFolderClick(event) {
        event.stopPropagation();
        this.props.browserProps.select(this.props.fileKey);
      }
    }, {
      key: 'handleFolderDoubleClick',
      value: function handleFolderDoubleClick(event) {
        event.stopPropagation();
        this.toggleFolder();
      }
    }, {
      key: 'handleRenameClick',
      value: function handleRenameClick(event) {
        if (!this.props.browserProps.renameFolder) {
          return;
        }
        this.props.browserProps.beginAction('rename', this.props.fileKey);
      }
    }, {
      key: 'handleNewNameChange',
      value: function handleNewNameChange(event) {
        var newName = this.refs.newName.value;
        this.setState(function (state) {
          state.newName = newName;
          return state;
        });
      }
    }, {
      key: 'handleRenameSubmit',
      value: function handleRenameSubmit(event) {
        event.preventDefault();
        var newName = this.state.newName.trim();
        if (newName.length == 0) {
          // todo: move to props handler
          // window.notify({
          //   style: 'error',
          //   title: 'Invalid new folder name',
          //   body: 'Folder name cannot be blank',
          // });
          return;
        }
        if (newName.indexOf('/') != -1) {
          // todo: move to props handler
          // window.notify({
          //   style: 'error',
          //   title: 'Invalid new folder name',
          //   body: 'Folder names cannot contain forward slashes.',
          // });
          return;
        }
        var newKey = this.props.fileKey.substr(0, this.props.fileKey.substr(0, this.props.fileKey.length - 1).lastIndexOf('/'));
        if (newKey.length) {
          newKey += '/';
        }
        newKey += newName;
        newKey += '/';
        if (this.props.isDraft) {
          this.props.browserProps.createFolder(newKey);
        } else {
          this.props.browserProps.renameFolder(this.props.fileKey, newKey);
        }
      }
    }, {
      key: 'handleDeleteClick',
      value: function handleDeleteClick(event) {
        if (!this.props.browserProps.deleteFolder) {
          return;
        }
        this.props.browserProps.beginAction('delete', this.props.fileKey);
      }
    }, {
      key: 'handleDeleteSubmit',
      value: function handleDeleteSubmit(event) {
        event.preventDefault();
        if (!this.props.browserProps.deleteFolder) {
          return;
        }
        this.props.browserProps.deleteFolder(this.props.fileKey);
      }
    }, {
      key: 'handleCancelEdit',
      value: function handleCancelEdit(event) {
        this.props.browserProps.endAction();
      }
    }, {
      key: 'toggleFolder',
      value: function toggleFolder() {
        this.props.browserProps.toggleFolder(this.props.fileKey);
      }
    }, {
      key: 'connectDND',
      value: function connectDND(render) {
        var inAction = this.props.isDragging || this.props.action;
        if (this.props.keyDerived && this.props.keyDerived) {
          if (typeof this.props.browserProps.moveFolder === 'function' && !inAction && !this.props.isRenaming && !this.props.isDeleting) {
            render = this.props.connectDragSource(render);
          }
          if (typeof this.props.browserProps.createFiles === 'function' || typeof this.props.browserProps.moveFolder === 'function' || typeof this.props.browserProps.moveFile === 'function') {
            render = this.props.connectDropTarget(render);
          }
        }
        return render;
      }
    }]);

    return BaseFolder;
  }(_react2.default.Component);

  var dragSource = {
    beginDrag: function beginDrag(props) {
      props.browserProps.select(props.fileKey);
      return {
        key: props.fileKey
      };
    },
    endDrag: function endDrag(props, monitor, component) {
      if (!monitor.didDrop()) {
        return;
      }

      var item = monitor.getItem();
      var dropResult = monitor.getDropResult();

      var fileNameParts = props.fileKey.split('/');
      var folderName = fileNameParts[fileNameParts.length - 2];
      var folderPath = props.fileKey.substr(0, props.fileKey.length - (folderName.length + 2));

      var newKey = '' + (dropResult.path ? dropResult.path + '/' : '') + folderName + '/';
      // abort of the new folder name contains itself
      if (newKey.substr(0, props.fileKey.length) === props.fileKey) return;

      if (newKey != props.fileKey && props.browserProps.renameFolder) {
        props.browserProps.openFolder(dropResult.path + '/');
        props.browserProps.renameFolder(props.fileKey, newKey);
      }
    }
  };

  function dragCollect(connect, monitor) {
    return {
      connectDragPreview: connect.dragPreview(),
      connectDragSource: connect.dragSource(),
      isDragging: monitor.isDragging()
    };
  }

  var BaseFolderConnectors = {
    dragSource: dragSource,
    dragCollect: dragCollect
  };

  exports.default = BaseFolder;
  exports.BaseFolderConnectors = BaseFolderConnectors;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BaseFileConnectors = undefined;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _react = __webpack_require__(1);

  var _react2 = _interopRequireDefault(_react);

  var _reactDnd = __webpack_require__(4);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var IMAGE_EXTENSIONS = ['jpg', 'png', 'bmp'];

  var BaseFile = function (_React$Component) {
    _inherits(BaseFile, _React$Component);

    function BaseFile(props) {
      _classCallCheck(this, BaseFile);

      var _this = _possibleConstructorReturn(this, (BaseFile.__proto__ || Object.getPrototypeOf(BaseFile)).call(this, props));

      _this.handleFileClick = _this.handleFileClick.bind(_this);
      _this.handleItemClick = _this.handleItemClick.bind(_this);
      _this.handleItemDoubleClick = _this.handleItemDoubleClick.bind(_this);
      _this.handleRenameClick = _this.handleRenameClick.bind(_this);
      _this.handleNewNameChange = _this.handleNewNameChange.bind(_this);
      _this.handleRenameSubmit = _this.handleRenameSubmit.bind(_this);
      _this.handleDeleteClick = _this.handleDeleteClick.bind(_this);
      _this.handleDeleteSubmit = _this.handleDeleteSubmit.bind(_this);
      _this.handleCancelEdit = _this.handleCancelEdit.bind(_this);

      _this.connectDND = _this.connectDND.bind(_this);

      _this.state = _extends({}, _this.state, {

        newName: _this.getName()
      });
      return _this;
    }

    _createClass(BaseFile, [{
      key: 'componentDidUpdate',
      value: function componentDidUpdate(oldProps, oldState) {
        var _this2 = this;

        if (!oldProps.isRenaming && this.props.isRenaming) {
          window.requestAnimationFrame(function () {
            var currentName = _this2.refs.newName.value;
            var pointIndex = currentName.lastIndexOf('.');
            _this2.refs.newName.setSelectionRange(0, pointIndex || currentName.length);
            _this2.refs.newName.focus();
          });
        }
      }
    }, {
      key: 'getName',
      value: function getName() {
        var name = this.props.newKey || this.props.fileKey;
        var slashIndex = name.lastIndexOf('/');
        if (slashIndex != -1) {
          name = name.substr(slashIndex + 1);
        }
        return name;
      }
    }, {
      key: 'getExtension',
      value: function getExtension() {
        var blobs = this.props.fileKey.split('.');
        return blobs[blobs.length - 1].toLowerCase().trim();
      }
    }, {
      key: 'isImage',
      value: function isImage() {
        var extension = this.getExtension();
        for (var extensionIndex = 0; extensionIndex < IMAGE_EXTENSIONS.length; extensionIndex++) {
          var imageExtension = IMAGE_EXTENSIONS[extensionIndex];
          if (extension == imageExtension) {
            return true;
          }
        }
        return false;
      }
    }, {
      key: 'isPdf',
      value: function isPdf() {
        var extension = this.getExtension();
        return extension == 'pdf';
      }
    }, {
      key: 'handleFileClick',
      value: function handleFileClick(event) {
        if (event) {
          event.preventDefault();
        }
        this.props.browserProps.preview({
          url: this.props.url,
          name: this.getName(),
          key: this.props.fileKey,
          extension: this.getExtension()
        });
      }
    }, {
      key: 'handleItemClick',
      value: function handleItemClick(event) {
        event.stopPropagation();
        this.props.browserProps.select(this.props.fileKey);
      }
    }, {
      key: 'handleItemDoubleClick',
      value: function handleItemDoubleClick(event) {
        event.stopPropagation();
        this.handleFileClick();
      }
    }, {
      key: 'handleRenameClick',
      value: function handleRenameClick(event) {
        if (!this.props.browserProps.renameFile) {
          return;
        }
        this.props.browserProps.beginAction('rename', this.props.fileKey);
      }
    }, {
      key: 'handleNewNameChange',
      value: function handleNewNameChange(event) {
        var newName = this.refs.newName.value;
        this.setState(function (state) {
          state.newName = newName;
          return state;
        });
      }
    }, {
      key: 'handleRenameSubmit',
      value: function handleRenameSubmit(event) {
        if (event) {
          event.preventDefault();
        }
        var newName = this.state.newName.trim();
        if (newName.length == 0) {
          // todo: move to props handler
          // window.notify({
          //   style: 'error',
          //   title: 'Invalid new file name',
          //   body: 'File name cannot be blank',
          // });
          return;
        }
        if (newName.indexOf('/') != -1) {
          // todo: move to props handler
          // window.notify({
          //   style: 'error',
          //   title: 'Invalid new file name',
          //   body: 'File names cannot contain forward slashes.',
          // });
          return;
        }
        var newKey = this.props.fileKey.substr(0, this.props.fileKey.lastIndexOf('/'));
        newKey += '/';
        newKey += newName;
        this.props.browserProps.renameFile(this.props.fileKey, newKey);
      }
    }, {
      key: 'handleDeleteClick',
      value: function handleDeleteClick(event) {
        if (!this.props.browserProps.deleteFile) {
          return;
        }
        this.props.browserProps.beginAction('delete', this.props.fileKey);
      }
    }, {
      key: 'handleDeleteSubmit',
      value: function handleDeleteSubmit(event) {
        event.preventDefault();
        if (!this.props.browserProps.deleteFile) {
          return;
        }
        this.props.browserProps.deleteFile(this.props.fileKey);
      }
    }, {
      key: 'handleCancelEdit',
      value: function handleCancelEdit(event) {
        this.props.browserProps.endAction();
      }
    }, {
      key: 'connectDND',
      value: function connectDND(render) {
        var inAction = this.props.isDragging || this.props.action;
        if (typeof this.props.browserProps.moveFile === 'function' && !inAction && !this.props.isRenaming) {
          render = this.props.connectDragSource(render);
        }
        if (typeof this.props.browserProps.createFiles === 'function' || typeof this.props.browserProps.moveFile === 'function' || typeof this.props.browserProps.moveFolder === 'function') {
          render = this.props.connectDropTarget(render);
        }
        return render;
      }
    }]);

    return BaseFile;
  }(_react2.default.Component);

  var dragSource = {
    beginDrag: function beginDrag(props) {
      props.browserProps.select(props.fileKey);
      return {
        key: props.fileKey
      };
    },
    endDrag: function endDrag(props, monitor, component) {
      if (!monitor.didDrop()) return;

      var item = monitor.getItem();
      var dropResult = monitor.getDropResult();
      var fileNameParts = props.fileKey.split('/');
      var fileName = fileNameParts[fileNameParts.length - 1];
      var newKey = '' + (dropResult.path ? dropResult.path + '/' : '') + fileName;
      if (newKey != props.fileKey && props.browserProps.renameFile) {
        props.browserProps.openFolder(dropResult.path + '/');
        props.browserProps.renameFile(props.fileKey, newKey);
      }
    }
  };

  function dragCollect(connect, monitor) {
    return {
      connectDragPreview: connect.dragPreview(),
      connectDragSource: connect.dragSource(),
      isDragging: monitor.isDragging()
    };
  };

  var targetSource = {
    drop: function drop(props, monitor) {
      if (monitor.didDrop()) {
        return;
      }
      var key = props.newKey || props.fileKey;
      var path = key.substr(0, key.lastIndexOf('/') || key.length);
      var item = monitor.getItem();
      if (item.files && props.browserProps.createFiles) {
        props.browserProps.createFiles(item.files, path + '/');
      }
      return {
        path: path
      };
    }
  };

  function targetCollect(connect, monitor) {
    return {
      connectDropTarget: connect.dropTarget(),
      isOver: monitor.isOver({ shallow: true })
    };
  };

  var BaseFileConnectors = {
    dragSource: dragSource,
    dragCollect: dragCollect,
    targetSource: targetSource,
    targetCollect: targetCollect
  };

  exports.default = BaseFile;
  exports.BaseFileConnectors = BaseFileConnectors;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _react = __webpack_require__(1);

  var _react2 = _interopRequireDefault(_react);

  var _classnames = __webpack_require__(8);

  var _classnames2 = _interopRequireDefault(_classnames);

  var _reactDnd = __webpack_require__(4);

  var _reactDndHtml5Backend = __webpack_require__(3);

  var _baseFile = __webpack_require__(6);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var TableHeader = function (_React$Component) {
    _inherits(TableHeader, _React$Component);

    function TableHeader() {
      _classCallCheck(this, TableHeader);

      return _possibleConstructorReturn(this, (TableHeader.__proto__ || Object.getPrototypeOf(TableHeader)).apply(this, arguments));
    }

    _createClass(TableHeader, [{
      key: 'handleHeaderClick',
      value: function handleHeaderClick(event) {
        this.props.select(this.props.fileKey);
      }
    }, {
      key: 'render',
      value: function render() {
        var header = _react2.default.createElement(
          'tr',
          {
            className: (0, _classnames2.default)('folder', {
              dragover: this.props.isOver,
              selected: this.props.isSelected
            })
          },
          _react2.default.createElement(
            'th',
            null,
            'File'
          ),
          _react2.default.createElement(
            'th',
            { className: 'size' },
            'Size'
          ),
          _react2.default.createElement(
            'th',
            { className: 'modified' },
            'Last Modified'
          )
        );

        if (typeof this.props.browserProps.createFile === 'function' || typeof this.props.browserProps.moveFolder === 'function' || typeof this.props.browserProps.moveFile === 'function') {
          return this.props.connectDropTarget(header);
        } else {
          return header;
        }
      }
    }]);

    return TableHeader;
  }(_react2.default.Component);

  exports.default = (0, _reactDnd.DropTarget)(['file', 'folder', _reactDndHtml5Backend.NativeTypes.FILE], _baseFile.BaseFileConnectors.targetSource, _baseFile.BaseFileConnectors.targetCollect)(TableHeader);

/***/ }),
/* 8 */
/***/ (function(module, exports) {

  module.exports = require("classnames");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _react = __webpack_require__(1);

  var _react2 = _interopRequireDefault(_react);

  var _classnames = __webpack_require__(8);

  var _classnames2 = _interopRequireDefault(_classnames);

  var _reactDnd = __webpack_require__(4);

  var _reactDndHtml5Backend = __webpack_require__(3);

  var _baseFolder = __webpack_require__(5);

  var _baseFolder2 = _interopRequireDefault(_baseFolder);

  var _baseFile = __webpack_require__(6);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var TableFolder = function (_BaseFolder) {
    _inherits(TableFolder, _BaseFolder);

    function TableFolder() {
      _classCallCheck(this, TableFolder);

      return _possibleConstructorReturn(this, (TableFolder.__proto__ || Object.getPrototypeOf(TableFolder)).apply(this, arguments));
    }

    _createClass(TableFolder, [{
      key: 'render',
      value: function render() {
        var _this2 = this;

        var icon;
        if (this.props.isOpen) {
          icon = _react2.default.createElement('i', { className: 'fa fa-folder-open-o', 'aria-hidden': 'true' });
        } else {
          icon = _react2.default.createElement('i', { className: 'fa fa-folder-o', 'aria-hidden': 'true' });
        }

        var inAction = this.props.isDragging || this.props.action;

        var name;
        if (!inAction && this.props.isDeleting) {
          name = _react2.default.createElement(
            'form',
            { className: 'deleting', onSubmit: this.handleDeleteSubmit },
            _react2.default.createElement(
              'a',
              {
                href: this.props.url,
                download: 'download',
                onClick: function onClick(event) {
                  event.preventDefault();
                  _this2.handleFileClick();
                }
              },
              icon,
              this.getName()
            ),
            _react2.default.createElement(
              'div',
              { className: 'actions' },
              _react2.default.createElement(
                'button',
                { type: 'submit', className: 'btn btn-sm btn-secondary' },
                'Confirm Deletion'
              )
            )
          );
        } else if (!inAction && this.props.isRenaming || this.props.isDraft) {
          name = _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
              'form',
              { className: 'renaming', onSubmit: this.handleRenameSubmit },
              icon,
              _react2.default.createElement('input', {
                type: 'text',
                ref: 'newName',
                className: 'form-control input-sm',
                value: this.state.newName,
                onChange: this.handleNewNameChange,
                onBlur: this.handleCancelEdit,
                autoFocus: true
              })
            )
          );
        } else {
          name = _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
              'a',
              { onClick: this.toggleFolder },
              icon,
              this.getName()
            )
          );
        }

        if (typeof this.props.browserProps.moveFolder === 'function') {
          name = this.props.connectDragPreview(name);
        }

        var folder = _react2.default.createElement(
          'tr',
          {
            className: (0, _classnames2.default)('folder', {
              pending: this.props.action,
              dragging: this.props.isDragging,
              dragover: this.props.isOver,
              selected: this.props.isSelected
            }),
            onClick: this.handleFolderClick,
            onDoubleClick: this.handleFolderDoubleClick
          },
          _react2.default.createElement(
            'td',
            { className: 'name' },
            _react2.default.createElement(
              'div',
              { style: { paddingLeft: this.props.depth * 16 + 'px' } },
              name
            )
          ),
          _react2.default.createElement('td', null),
          _react2.default.createElement('td', null)
        );

        return this.connectDND(folder);
      }
    }]);

    return TableFolder;
  }(_baseFolder2.default);

  exports.default = (0, _reactDnd.DragSource)('folder', _baseFolder.BaseFolderConnectors.dragSource, _baseFolder.BaseFolderConnectors.dragCollect)((0, _reactDnd.DropTarget)(['file', 'folder', _reactDndHtml5Backend.NativeTypes.FILE], _baseFile.BaseFileConnectors.targetSource, _baseFile.BaseFileConnectors.targetCollect)(TableFolder));

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _react = __webpack_require__(1);

  var _react2 = _interopRequireDefault(_react);

  var _moment = __webpack_require__(11);

  var _moment2 = _interopRequireDefault(_moment);

  var _classnames = __webpack_require__(8);

  var _classnames2 = _interopRequireDefault(_classnames);

  var _reactDnd = __webpack_require__(4);

  var _reactDndHtml5Backend = __webpack_require__(3);

  var _baseFile = __webpack_require__(6);

  var _baseFile2 = _interopRequireDefault(_baseFile);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  function float_precision(float_value, precision) {
    float_value = parseFloat(float_value);
    if (isNaN(float_value)) {
      return parseFloat('0').toFixed(precision);
    } else {
      var power = Math.pow(10, precision);
      float_value = (Math.round(float_value * power) / power).toFixed(precision);
      return float_value.toString();
    }
  }

  function file_size(size) {
    if (size > 1024) {
      var kb_size = size / 1024;
      if (kb_size > 1024) {
        var mb_size = kb_size / 1024;
        return '' + float_precision(mb_size, 2) + ' MB';
      }
      return '' + Math.round(kb_size) + ' kB';
    }
    return '' + size + ' B';
  }

  var TableFile = function (_BaseFile) {
    _inherits(TableFile, _BaseFile);

    function TableFile() {
      _classCallCheck(this, TableFile);

      return _possibleConstructorReturn(this, (TableFile.__proto__ || Object.getPrototypeOf(TableFile)).apply(this, arguments));
    }

    _createClass(TableFile, [{
      key: 'render',
      value: function render() {
        var _this2 = this;

        var icon;
        if (this.isImage()) {
          icon = _react2.default.createElement('i', { className: 'fa fa-file-image-o', 'aria-hidden': 'true' });
        } else if (this.isPdf()) {
          icon = _react2.default.createElement('i', { className: 'fa fa-file-pdf-o', 'aria-hidden': 'true' });
        } else {
          icon = _react2.default.createElement('i', { className: 'fa fa-file-o', 'aria-hidden': 'true' });
        }

        var inAction = this.props.isDragging || this.props.action;

        var name;
        if (!inAction && this.props.isDeleting) {
          name = _react2.default.createElement(
            'form',
            { className: 'deleting', onSubmit: this.handleDeleteSubmit },
            _react2.default.createElement(
              'a',
              {
                href: this.props.url || "#",
                download: 'download',
                onClick: function onClick(event) {
                  event.preventDefault();
                  _this2.handleFileClick();
                }
              },
              icon,
              this.getName()
            ),
            _react2.default.createElement(
              'div',
              { className: 'actions' },
              _react2.default.createElement(
                'button',
                { type: 'submit', className: 'btn btn-sm btn-secondary' },
                'Confirm Deletion'
              )
            )
          );
        } else if (!inAction && this.props.isRenaming) {
          name = _react2.default.createElement(
            'form',
            { className: 'renaming', onSubmit: this.handleRenameSubmit },
            icon,
            _react2.default.createElement('input', {
              ref: 'newName',
              className: 'form-control input-sm',
              type: 'text',
              value: this.state.newName,
              onChange: this.handleNewNameChange,
              onBlur: this.handleCancelEdit
            })
          );
        } else {
          name = _react2.default.createElement(
            'a',
            {
              href: this.props.url || "#",
              download: 'download',
              onClick: function onClick(event) {
                event.preventDefault();
                _this2.handleFileClick();
              }
            },
            icon,
            this.getName()
          );
        }

        var draggable = _react2.default.createElement(
          'div',
          null,
          name
        );
        if (typeof this.props.browserProps.moveFile === 'function') {
          draggable = this.props.connectDragPreview(draggable);
        }

        var row = _react2.default.createElement(
          'tr',
          {
            className: (0, _classnames2.default)('file', {
              pending: this.props.action,
              dragging: this.props.isDragging,
              dragover: this.props.isOver,
              selected: this.props.isSelected
            }),
            onClick: this.handleItemClick,
            onDoubleClick: this.handleItemDoubleClick
          },
          _react2.default.createElement(
            'td',
            { className: 'name' },
            _react2.default.createElement(
              'div',
              { style: { paddingLeft: this.props.depth * 16 + 'px' } },
              draggable
            )
          ),
          _react2.default.createElement(
            'td',
            { className: 'size' },
            file_size(this.props.size)
          ),
          _react2.default.createElement(
            'td',
            { className: 'modified' },
            typeof this.props.modified === 'undefined' ? '-' : (0, _moment2.default)(this.props.modified, 'x').fromNow()
          )
        );

        return this.connectDND(row);
      }
    }]);

    return TableFile;
  }(_baseFile2.default);

  exports.default = (0, _reactDnd.DragSource)('file', _baseFile.BaseFileConnectors.dragSource, _baseFile.BaseFileConnectors.dragCollect)((0, _reactDnd.DropTarget)(['file', 'folder', _reactDndHtml5Backend.NativeTypes.FILE], _baseFile.BaseFileConnectors.targetSource, _baseFile.BaseFileConnectors.targetCollect)(TableFile));

/***/ }),
/* 11 */
/***/ (function(module, exports) {

  module.exports = require("moment");

/***/ }),
/* 12 */
/***/ (function(module, exports) {

  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  exports.default = function (files, root) {
    var fileTree = {
      contents: [],
      children: {}
    };

    files.map(function (file) {
      file.relativeKey = (file.newKey || file.key).substr(root.length);
      var currentFolder = fileTree;
      var folders = file.relativeKey.split('/');
      folders.map(function (folder, folderIndex) {
        if (folderIndex == folders.length - 1 && !file.size) {
          for (var key in file) {
            currentFolder[key] = file[key];
          }
        }
        if (folder == '') {
          return;
        }
        var isAFile = file.size && folderIndex == folders.length - 1;
        if (isAFile) {
          currentFolder.contents.push(_extends({}, file, {
            keyDerived: true
          }));
        } else {
          if (folder in currentFolder.children == false) {
            currentFolder.children[folder] = {
              contents: [],
              children: {}
            };
          }
          currentFolder = currentFolder.children[folder];
        }
      });
    });

    var add_all_children = function add_all_children(level, prefix) {
      if (prefix != '') {
        prefix += '/';
      }
      var files = [];
      for (var folder in level.children) {
        files.push(_extends({}, level.children[folder], {
          contents: undefined,
          keyDerived: true,
          key: root + prefix + folder + '/',
          relativeKey: prefix + folder + '/',
          children: add_all_children(level.children[folder], prefix + folder),
          size: 0
        }));
      }
      files = files.concat(level.contents);
      return files;
    };

    files = add_all_children(fileTree, '');
    return files;
  };

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function (files) {
    return natural_sort(files);
  };

  var _utils = __webpack_require__(14);

  function natural_draft_comparer(a, b) {
    if (a.draft && !b.draft) {
      return 1;
    } else if (b.draft && !a.draft) {
      return -1;
    }
    return (0, _utils.natural_sort_comparer)(a, b);
  }

  var natural_sort = function natural_sort(allFiles) {
    var folders = [];
    var files = [];

    for (var fileIndex = 0; fileIndex < allFiles.length; fileIndex++) {
      var file = allFiles[fileIndex];
      var keyFolders = (file.newKey || file.key).split('/');
      if (file.children) {
        if (!file.name) {
          file.name = keyFolders[keyFolders.length - 2];
        }
        folders.push(file);
      } else {
        if (!file.name) {
          file.name = keyFolders[keyFolders.length - 1];
        }
        files.push(file);
      }
    }

    files = files.sort(_utils.natural_sort_comparer);
    folders = folders.sort(natural_draft_comparer);

    for (var folderIndex = 0; folderIndex < folders.length; folderIndex++) {
      var folder = folders[folderIndex];
      folder.children = natural_sort(folder.children);
    }

    var sortedFiles = [];
    sortedFiles = sortedFiles.concat(folders);
    sortedFiles = sortedFiles.concat(files);
    return sortedFiles;
  };

/***/ }),
/* 14 */
/***/ (function(module, exports) {

  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var NUMBER_GROUPS = /(-?\d*\.?\d+)/g;

  function natural_sort_comparer(a, b) {
    var aa = String(a.name).split(NUMBER_GROUPS);
    var bb = String(b.name).split(NUMBER_GROUPS);
    var min = Math.min(aa.length, bb.length);

    for (var i = 0; i < min; i++) {
      var x = parseFloat(aa[i]) || aa[i].toLowerCase(),
          y = parseFloat(bb[i]) || bb[i].toLowerCase();
      if (x < y) return -1;else if (x > y) return 1;
    }

    return 0;
  }

  exports.natural_sort_comparer = natural_sort_comparer;

/***/ })
/******/ ])
});
;
